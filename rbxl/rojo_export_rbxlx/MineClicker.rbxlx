<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="RBX9B7A34537FFD41069CBBF035F7823E30">
		<Properties>
			<bool name="AllowThirdPartySales">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="CollisionGroups">Default^0^1</string>
			<Ref name="CurrentCamera">RBX8F4B5DEAACE74A339B36E916EBA4A79D</Ref>
			<double name="DistributedGameTime">0</double>
			<bool name="ExplicitAutoJoints">true</bool>
			<float name="FallenPartsDestroyHeight">-50000</float>
			<bool name="FilteringEnabled">true</bool>
			<float name="Gravity">196.199997</float>
			<CoordinateFrame name="ModelInPrimary">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">Workspace</string>
			<Ref name="PrimaryPart">null</Ref>
			<bool name="StreamingEnabled">false</bool>
			<int name="StreamingMinRadius">64</int>
			<token name="StreamingPauseMode">0</token>
			<int name="StreamingTargetRadius">256</int>
			<BinaryString name="Tags"></BinaryString>
			<bool name="TemporaryLegacyPhysicsSolverOverrideStreaming">false</bool>
			<bool name="TerrainWeldsFixed">true</bool>
		</Properties>
		<Item class="Camera" referent="RBX8F4B5DEAACE74A339B36E916EBA4A79D">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<CoordinateFrame name="CFrame">
					<X>-31.5311871</X>
					<Y>15.3094378</Y>
					<Z>27.8042603</Z>
					<R00>0.36850369</R00>
					<R01>0.534617186</R01>
					<R02>-0.760519326</R02>
					<R10>-0</R10>
					<R11>0.818091512</R11>
					<R12>0.575088263</R12>
					<R20>0.929626346</R20>
					<R21>-0.211922154</R21>
					<R22>0.301469713</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-30.0101528</X>
					<Y>14.1592646</Y>
					<Z>27.2013226</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">Camera</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX54A289CB0BBC428CAB88076D707A9B90">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>-3.40500259</X>
					<Y>-10</Y>
					<Z>19.0399303</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CastShadow">false</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4284702562</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="Name">Baseplate</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">0</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>48.8900223</X>
					<Y>20</Y>
					<Z>48.540081</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Terrain" referent="RBX6ADFA6B60CA24DCBBE555EB7B93D142D">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="Decoration">true</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHta
gcLgc4RKxr21zq2UlJSM]]></BinaryString>
				<string name="Name">Terrain</string>
				<BinaryString name="PhysicsGrid">AgMAAAAAAAAAAAAAAAA=</BinaryString>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="SmoothGrid">AQU=</BinaryString>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Color3 name="WaterColor">
					<R>0.0470588282</R>
					<G>0.329411775</G>
					<B>0.360784322</B>
				</Color3>
				<float name="WaterReflectance">1</float>
				<float name="WaterTransparency">0.300000012</float>
				<float name="WaterWaveSize">0.150000006</float>
				<float name="WaterWaveSpeed">10</float>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX3147B3EDD9184D37A43931FA88B225ED">
			<Properties>
				<bool name="Anchored">false</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>-12.740015</X>
					<Y>2</Y>
					<Z>22.7699718</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="Name">Part</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>4</X>
					<Y>4</Y>
					<Z>4</Z>
				</Vector3>
			</Properties>
			<Item class="Decal" referent="RBX89187328163E44F9914B1C20EAA33285">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Dirt Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=4552277589</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX4CAFD39927734B3B8DA9B95A77B2351C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">1</token>
					<string name="Name">Adurite texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=2597103337</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX9AD0A923CD0242E2934DC3A11C557376">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">5</token>
					<string name="Name">Cobblestone Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=4588038162</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXB700B70429464C22A9B51BC67D9EA7EB">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">2</token>
					<string name="Name">Diamond Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=43066568</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX6D6239EC46B04CA19A5CB71F688048B4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">0</token>
					<string name="Name">Universe Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=1796560000</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX7925514C29684D538B63EE8F499E3427">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Bathroom texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=1757637666</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX9B0DB897C87448BCB936F35940FCB617">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">5</token>
					<string name="Name">CAMO TEXTURE</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=3254393364</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXBED00A9F023448ED922EFE9E052B66DF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">2</token>
					<string name="Name">Magma Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=14063310</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX1737646E67A141E2987D6578FD2F58B1">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">1</token>
					<string name="Name">Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=95107243</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX82535FCA692E4A73A6908FF84FE90DDA">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">0</token>
					<string name="Name">Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=888498549</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXA44CDA7A84EB44DCB497ED2C60902327">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Texture </string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=1164807748</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX0656D5301E974D2C8047B87BF4E913CC">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">0</token>
					<string name="Name">texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=368102424</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXACEAA94D07664F8B8C8F034F851F5B92">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">1</token>
					<string name="Name">texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=4693745392</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX5208D99511DF495797EB5FE6EB032743">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">2</token>
					<string name="Name">texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=60334650</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX1B41B7360E1843BBA0BA3D0E6E5A573C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">5</token>
					<string name="Name">texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=11634749</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXFA3DAD1DCFB248CD8BE66605E0B1B754">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">meat texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=2669973298</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXC45238679EC34FEFA4497FD2E66E1E95">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">pizza texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=1444995394</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXA76218586A64460C84D1BFE1F48E4D2A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">pizza texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=1444995394</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX7426148BB49B4660B05305DB40B5DEA5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Rainbow_Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=1346908747</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX686FB3ED18E743F8A5113919D0F037D5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Rock texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=35548817</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXB5C3B45C77A2480D9247A45145864AF0">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Fabric texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=1958398457</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX68A4F581B06047C3A6DA57C6087E22E1">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">gravel texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=696511466</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBX815059D57FF94263910A3C5BEE0DDCAF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Texture - 14</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=17920450</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
			<Item class="Decal" referent="RBXDF0E491FA0FC44B786CC70215CD80E6D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">3</token>
					<string name="Name">Yellow Texture</string>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>http://www.roblox.com/asset/?id=92068874</url></Content>
					<float name="Transparency">0</float>
				</Properties>
			</Item>
		</Item>
		<Item class="Part" referent="RBX07CEB92CF52446D881F12ECF81C3B62D">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>-1.20001411</X>
					<Y>2</Y>
					<Z>36.1399689</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="Name">tileTemplate</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>4</X>
					<Y>4</Y>
					<Z>4</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX1B4F6828AB0F46E89BB04C6F6908842D">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Tiles</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
	<Item class="SoundService" referent="RBXF58D9D8BCF8A442996E0B7D99FB171CA">
		<Properties>
			<token name="AmbientReverb">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="DistanceFactor">3.32999992</float>
			<float name="DopplerScale">1</float>
			<string name="Name">SoundService</string>
			<bool name="RespectFilteringEnabled">true</bool>
			<float name="RolloffScale">1</float>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="NonReplicatedCSGDictionaryService" referent="RBXECDEDE037C9A44DCA3A3EFCED0740251">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">NonReplicatedCSGDictionaryService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="CSGDictionaryService" referent="RBX458BE4AB57C74E23AC7692365205F96E">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CSGDictionaryService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Chat" referent="RBX1F7F2BFDF2E347029B2EBC5549643FD8">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="BubbleChatEnabled">false</bool>
			<bool name="LoadDefaultChat">true</bool>
			<string name="Name">Chat</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBX1198CA5D26C540C49E2613213E09D5D2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Players" referent="RBXFB5B8D01BD674F0D824BF564C8F4F84E">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CharacterAutoLoads">true</bool>
			<int name="MaxPlayersInternal">12</int>
			<string name="Name">Players</string>
			<int name="PreferredPlayersInternal">56832</int>
			<float name="RespawnTime">5</float>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ReplicatedFirst" referent="RBXD8B776D134C14372ADD5939AED0ED726">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedFirst</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TweenService" referent="RBXA943FE1BFC914502ACAC318561F617C7">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TweenService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="PermissionsService" referent="RBX861E1DC934B14FEC9CA83ADC0C4C5258">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PermissionsService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="StudioData" referent="RBX7F4ACE126E6E40408DB985B936356AAC">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int64 name="CommitInflightAuthorId">0</int64>
			<string name="CommitInflightGuid"></string>
			<int name="CommitInflightPlaceVersion">0</int>
			<bool name="EnableScriptCollabByDefaultOnLoad">true</bool>
			<bool name="EnableScriptCollabOnLoad">false</bool>
			<bool name="EnableScriptCollabVersionHistoryOnLoad">false</bool>
			<string name="Name">StudioData</string>
			<int64 name="SrcPlaceId">0</int64>
			<int64 name="SrcUniverseId">0</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="StarterPlayer" referent="RBX8ADF15EC666A42DCA44237AC8533FBB2">
		<Properties>
			<bool name="AllowCustomAnimations">true</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoJumpEnabled">true</bool>
			<float name="CameraMaxZoomDistance">800</float>
			<float name="CameraMinZoomDistance">30</float>
			<token name="CameraMode">0</token>
			<float name="CharacterJumpHeight">7.19999981</float>
			<float name="CharacterJumpPower">50</float>
			<float name="CharacterMaxSlopeAngle">89</float>
			<bool name="CharacterUseJumpPower">true</bool>
			<float name="CharacterWalkSpeed">16</float>
			<token name="DevCameraOcclusionMode">0</token>
			<token name="DevComputerCameraMovementMode">0</token>
			<token name="DevComputerMovementMode">0</token>
			<token name="DevTouchCameraMovementMode">0</token>
			<token name="DevTouchMovementMode">0</token>
			<bool name="EnableMouseLockOption">true</bool>
			<int64 name="GameSettingsAssetIDFace">0</int64>
			<int64 name="GameSettingsAssetIDHead">0</int64>
			<int64 name="GameSettingsAssetIDLeftArm">0</int64>
			<int64 name="GameSettingsAssetIDLeftLeg">0</int64>
			<int64 name="GameSettingsAssetIDPants">0</int64>
			<int64 name="GameSettingsAssetIDRightArm">0</int64>
			<int64 name="GameSettingsAssetIDRightLeg">0</int64>
			<int64 name="GameSettingsAssetIDShirt">0</int64>
			<int64 name="GameSettingsAssetIDTeeShirt">0</int64>
			<int64 name="GameSettingsAssetIDTorso">0</int64>
			<token name="GameSettingsAvatar">1</token>
			<token name="GameSettingsR15Collision">0</token>
			<NumberRange name="GameSettingsScaleRangeBodyType">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHead">0.95 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHeight">0.9 1.05 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeProportion">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeWidth">0.7 1 </NumberRange>
			<float name="HealthDisplayDistance">100</float>
			<bool name="LoadCharacterAppearance">true</bool>
			<string name="Name">StarterPlayer</string>
			<float name="NameDisplayDistance">100</float>
			<BinaryString name="Tags"></BinaryString>
			<bool name="UserEmotesEnabled">true</bool>
		</Properties>
		<Item class="StarterPlayerScripts" referent="RBXDA95C2BB8FDE4822928652D7BD637CD6">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterPlayerScripts</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Folder" referent="RBXEAA45D0EA6DC4DA3B056C228F5C22B5E">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GameRoot</string>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="LocalScript" referent="RBXD638D10396E74C698C49F901912A3454">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GameScript</string>
						<string name="ScriptGuid">{82DFD7EE-8BB7-495C-8D50-60F0EDE4A854}</string>
						<ProtectedString name="Source"><![CDATA[local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local ROOT = script.Parent

local TerrainGenerator = require(ROOT.TerrainGenerationModules.TerrainGenerator)
local ImageProcessor = require(ROOT.TerrainGenerationModules.ImageProcessor)
local DrawFunctions = require(ROOT.TerrainGenerationModules.DrawFunctions)
local SedimentLayers = require(ROOT.TerrainGenerationModules.SedimentLayers)
local WorldData = require(ROOT.DataModules.WorldData)
local WorldConfig = require(ROOT.DataModules.WorldConfig)
local TerrainDisplay = require(ROOT.TerrainDisplayModules.TerrainDisplay)
local Timer = require(ROOT.HelperModules.Timer).new()

local SEDIMENT_DATA = require(ROOT.DataModules.SedimentDataSets.SedimentData1)



local loadFunction = ReplicatedStorage.Load
local saveFunction = ReplicatedStorage.Save


local sedimentLayers = SedimentLayers.new()
sedimentLayers:processData(SEDIMENT_DATA)


local seed = 0--math.random(-10000, 10000)
local terrainGen = TerrainGenerator.new(
	seed,
	sedimentLayers.thresholdData,
	sedimentLayers.tileData) do
	
	local draw = DrawFunctions
	
	local sediments = ImageProcessor.new()
	sediments:blend("MIX", 	1,		draw.noise(.05, .05, 0, 0))
	sediments:blend("MIX", 	0.5,	draw.noise(.1, .1, 0, 0)) --increasing perlin noise depth, more detailed
	sediments:blend("MIX", 	0.25,	draw.noise(.2, .2, 0, 0))
	sediments:blend("MIX", 	0.125,	draw.noise(.4, .4, 0, 0))
	sediments:blend("MIX", 	0.83,	draw.constant(.5)) --reduce contrast to emphasize gradient overlay, makes more "stepped" sediment
	
	--sediments:blend("ADD",	
	sediments:blend("OVERLAY",		1,	draw.gradient(0, 0, 0, sedimentLayers.cumulativeDepth))
	
	terrainGen:addImageProcessor(sediments)
	
	--[[
	local ground = ThresholdDrawer.new({0, 0.25, 0.285, 0.38}, {0, 1, 2, 3})
	ground:blend("ADD", 	1, 	draw.gradient(0, 0, 0, 40))
	ground:blend("OVERLAY",	1, 	draw.noise(.055, .055, 0, 0))
	terrainGen:addDrawer(ground)
	]]
	
	
	
end

local rootModel = Instance.new("Model")
rootModel.Parent = workspace

local world = WorldData.new(terrainGen)
local terrain = TerrainDisplay.new(
	world,
	rootModel,
	CFrame.new(-WorldConfig.CHUNK_COL*WorldConfig.CHUNK_DIM*WorldConfig.TILE_SIZE/2, 50, 0))


--[[
Timer:tick("gen")
for y = 0, 31 do
	for x = 0, 15 do
		terrain:drawChunk(x, y)
	end
end
Timer:tock()
]]





local abs = math.abs
local function planeIntersection(ray, planeTransform)
	local normal = planeTransform.LookVector
	local point = planeTransform.p
	local denom = normal:Dot(ray.Direction)
	
	if abs(denom) >= 1e-6 then
		local x = (normal:Dot(point) - normal:Dot(ray.Origin)) / denom
		if x < 0 then
			return false
		end
		
		return true, ray.Origin + ray.Direction*x
	end
	
	return false
end



local mouse = game.Players.LocalPlayer:GetMouse()
local function mineBlock()
	local ray = mouse.UnitRay
	local hit, contact = planeIntersection(ray, terrain.transform * CFrame.new(0, 0, WorldConfig.TILE_SIZE/2))
	if hit then
		local x, y = terrain:worldToTile(contact)
		--print(x, y)
		world:setBinary(x, y, 1)
		--world:setTile(x, y, 3)
	end
end

local mouseDown = false
mouse.Button1Down:Connect(function()
	mouseDown = true
	mineBlock()
end)
mouse.Button1Up:Connect(function()
	mouseDown = false
end)

mouse.Move:Connect(function()
	if mouseDown then
		mineBlock()
	end
end)

local lastPos = Vector3.new()

game.Players.LocalPlayer.CharacterAdded:Connect(function()
	local hrp = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
	local torch_emitter = game.ReplicatedStorage.Lights.TorchEmitter
	torch_emitter.Light:Clone().Parent = hrp
	while true do
		wait(.1)
		local pos = hrp.Position
		local x, y = terrain:worldToTile(pos)
		local cx, cy = WorldConfig.tileXYtoChunkXY(x, y)
		
		for xx = -1, 1 do
			for yy = -1, 1 do
				terrain:drawChunk(cx+xx, cy+yy)
			end
		end
		
		if (lastPos - pos).magnitude > 15 then
			lastPos = pos
			local t = torch_emitter:Clone()
			t.CFrame = CFrame.new(pos)
			t.Parent = workspace
		end
		print(string.format("%s, %s", x, y))
	end
end)




UserInputService.InputBegan:Connect(function(inputObject)
	if inputObject.KeyCode == Enum.KeyCode.B then
		
		local saveString = world:binaryDataToString()
		local success = saveFunction:InvokeServer(saveString)
		
		if success then
			print("saved")
		else
			print("wut")
		end
		
	elseif inputObject.KeyCode == Enum.KeyCode.N then
		
		local success, loadString = loadFunction:InvokeServer()
		if success then
			terrain:clear()
			world:loadBinaryData(loadString)
			print("loaded!")
		else
			print("wutll")
		end
	end
end)

local sky_emitter = game.ReplicatedStorage.Lights.SkyEmitter
local torch_emitter = game.ReplicatedStorage.Lights.TorchEmitter

local width = WorldConfig.MAP_X * WorldConfig.TILE_SIZE
sky_emitter.CFrame = terrain.transform * CFrame.new(width/2, -12, 8)
sky_emitter.Size = Vector3.new(width, 4, 24)
sky_emitter.Parent = workspace

--game.Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
--game.Lighting.Brightness = 0




--[[ DATA STORE DEMO
	
world:initZeroBinaryData()
local save_string = world:binaryDataToString()
local world_store = DataStoreService:GetDataStore("world_data", tostring(35434))

Timer:tick()
world_store:SetAsync("binary", save_string)
Timer:tock()

Timer:tick()
local retrieved_data
local success, err = pcall(function()
	retrieved_data = world_store:GetAsync("binary")
end)
Timer:tock()
if success then
	print("success")
	
	Timer:tick()
	world:loadBinaryData(retrieved_data)
	Timer:tock()
	
	local same_string = world:binaryDataToString()
	print(#save_string)
	print(#same_string)
	print(same_string == save_string)
end

]]

]]></ProtectedString>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX1E71423278AD42B8870CF02EE72B039A">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">TerrainDisplayModules</string>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBXBA6815A52E764C8CB3683F5804AEB446">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">TerrainDisplay</string>
							<string name="ScriptGuid">{CC14CEF7-3AF6-4A0D-ABC5-A39BDE23AFCB}</string>
							<ProtectedString name="Source"><![CDATA[local ROOT = script.Parent.Parent

local WorldData = require(ROOT.DataModules.WorldData)
local WorldConfig = require(ROOT.DataModules.WorldConfig)
local TerrainChunk = require(ROOT.TerrainDisplayModules.TerrainChunk)

local TILE_SIZE = WorldConfig.TILE_SIZE
local CHUNK_DIM = WorldConfig.CHUNK_DIM

local floor = math.floor

local TerrainDisplay = {}
local TerrainDisplay_mt = { __index = TerrainDisplay }

--[[**
	Creates a display for terrain with data used from WorldData. Handles
	drawing chunks, updating tiles and  transforming to terrain coordinates.
	
	@param [t:WorldData] worldData
	@param [t:Model] rootModel Where the chunks will be parented to
	@param [t:CFrame] transform Transformation matrix for all chunks & tiles
	@returns [t:TerrainDisplay]
**--]]
function TerrainDisplay.new(worldData, rootModel, transform)
	local x, y, z, r00, r01, r02, r10, r11, r12, r20, r21, r22 = transform:GetComponents()
	local self = {
		worldData = worldData,
		rootModel = rootModel,
		transform = transform,
		invTransform = transform:inverse(),
		terrainChunks = {},
		
		_binaryChangedConnection = nil,
		_tileChangedConnection = nil,
	}
	
	setmetatable(self, TerrainDisplay_mt)
	
	self:initConnections()
	return self
end


function TerrainDisplay:initConnections()
	local function update(x, y)
		self:updateTile(x, y)
	end
	
	self._binaryChangedConnection = self.worldData.binaryChanged:Connect(update)
	self._tileChangedConnection = self.worldData.tileChanged:Connect(update)
end


function TerrainDisplay:clear()
	for _, chunk in pairs(self.terrainChunks) do
		chunk.model:Destroy()
	end
	self.terrainChunks = {}
end

--[[**
	Converts world coordinates to tile coordinates.
	
	@param [t:Vector3] worldPosition
	@returns [t:number] tileX
	@returns [t:number] tileY
**--]]
function TerrainDisplay:worldToTile(worldPosition)
	local tilePos = self.invTransform * worldPosition
	return floor(tilePos.x/TILE_SIZE), floor(-tilePos.y/TILE_SIZE)
end

--[[**
	Converts tile coordinates to world coordinates at tile center position.
	
	@param [t:number] tileX
	@param [t:number] tileY
	@returns [t:Vector3] worldPosition
**--]]
function TerrainDisplay:tileToWorld(tileX, tileY)
	local worldPos = self.transform * Vector3.new(TILE_SIZE * tileX, TILE_SIZE * tileY, 0)
	return worldPos
end

--[[**
	Draws a chunk in x, y chunk coordinates.
	
	@param [t:number] chunkX
	@param [t:number] chunkY
	@returns
**--]]
function TerrainDisplay:drawChunk(chunkX, chunkY)
	if chunkX < 0 or chunkX > WorldConfig.CHUNK_COL-1 or chunkY < 0 then
		return
	end
	
	self.worldData:loadChunk(chunkX, chunkY)
	local chunkIndex = WorldConfig.chunkXYtoIndex(chunkX, chunkY)
	
	local chunk = self.terrainChunks[chunkIndex]
	if chunk == nil then
		chunk = TerrainChunk.new(
			chunkIndex,
			self.worldData,
			self.transform * CFrame.new(
				CHUNK_DIM * TILE_SIZE * chunkX,
				-CHUNK_DIM * TILE_SIZE * chunkY,
				0),
			self.rootModel)
		
		self.terrainChunks[chunkIndex] = chunk
	end
	
	chunk:draw()
end

--[[**
	Hides a chunk in x, y chunk coordinates.
	
	@param [t:number] chunkX
	@param [t:number] chunkY
	@returns
**--]]
function TerrainDisplay:hideChunk(chunkX, chunkY)
	local chunkIndex = WorldConfig.chunkXYtoIndex(chunkX, chunkY)
	local chunk = self.terrainChunks[chunkIndex]
	
	if chunk ~= nil then
		chunk:hide()
	end
end

--[[**
	Redraws a single tile in x, y tile coordinates
	
	@param [t:number] tileX
	@param [t:number] tileY
	@returns
**--]]
function TerrainDisplay:updateTile(tileX, tileY)
	local chunkIndex = WorldConfig.tileXYtoChunkIndex(tileX, tileY)
	
	local chunk = self.terrainChunks[chunkIndex]
	if chunk ~= nil then
		chunk:updateTile(tileX % CHUNK_DIM, tileY % CHUNK_DIM)
	end
end


return TerrainDisplay
]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXA0A64D651F384D2684484226C8C2AA0A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">TerrainChunk</string>
							<string name="ScriptGuid">{FA0D5A8D-4F51-4C20-9351-82DB92C34043}</string>
							<ProtectedString name="Source"><![CDATA[local ROOT = script.Parent.Parent

local WorldData = require(ROOT.DataModules.WorldData)
local WorldConfig = require(ROOT.DataModules.WorldConfig)
local Block = require(ROOT.TerrainDisplayModules.Block)

local CHUNK_TILES = WorldConfig.CHUNK_TILES
local CHUNK_DIM = WorldConfig.CHUNK_DIM

local TerrainChunk = {}
TerrainChunk.__index = TerrainChunk

function TerrainChunk.new(index, worldData, transform, rootModel)
	local x, y = WorldConfig.chunkIndexToXY(index)
	local self = {
		index = index,
		x = x,
		y = y,
		
		worldData = worldData,
		tileData = worldData.chunkTileData[index],
		binaryData = worldData.chunkBinaryData[index],
		
		model = Instance.new("Model"),
		rootModel = rootModel,
		transform = transform,
		
		blocks = {},
		
		isDrawn = false,
	}
	
	setmetatable(self, TerrainChunk)
	return self
end

--[[
function TerrainChunk:draw()
	if not self.isDrawn then
		local tileSize = WorldConfig.TILE_SIZE
		for tileId, binary, x, y, index in self.worldData:chunk_iterator(self.index) do
			-- tileid 0 ??
			if tileId > 0 then
				local part = id[tileId]:Clone()
				part.CFrame = self.transform * CFrame.new(tileSize * Vector3.new(x + .5, -(y + .5), -binary))
				part.Parent = self.model
				self.parts[index] = part
			end
		end
		self.isDrawn = true
	end
	
	self.model.Parent = self.rootModel
end
]]
function TerrainChunk:calculateChunkBlocks()
	local blocks = {}
	local visited = {}
	local block
	
	for index = 1, CHUNK_TILES do
		if not visited[index] then
			local x, y = WorldConfig.tileIndexToXY(index)
			
			local id = self.tileData[index]
			local bit = bit32.extract(self.binaryData[y+1], x)
			
			block = Block.new(
				self.model, self.transform,
				id, bit, x, x, y, y)
			
			local found_y = false
			
			for xx = x, CHUNK_DIM-1 do
				local index2 = WorldConfig.tileXYtoIndex(xx, y)
				if visited[index2] or self.tileData[index2] ~= id or bit32.extract(self.binaryData[y+1], xx) ~= bit then
					break
				end
				block.right = xx
				visited[index2] = true
			end
			
			
			for yy = y+1, CHUNK_DIM-1 do
				for xx = x, block.right do
					local index2 = WorldConfig.tileXYtoIndex(xx, yy)
					if visited[index2] or self.tileData[index2] ~= id or bit32.extract(self.binaryData[yy+1], xx) ~= bit then
						block.bottom = yy-1
						found_y = true
						break
					end
					
				end
				if found_y then break end
				for xx = x, block.right do
					local index2 = WorldConfig.tileXYtoIndex(xx, yy)
					visited[index2] = true
				end
				block.bottom = yy
			end
			
			table.insert(blocks, block)
		end
	end
	
	return blocks
end


function TerrainChunk:draw()
	if not self.isDrawn then
		local tileSize = WorldConfig.TILE_SIZE
		
		local blocks = self:calculateChunkBlocks()
		self.blocks = blocks
		
		for _, block in ipairs(blocks) do
			block:draw()
		end
		
		self.isDrawn = true
	end
	
	self.model.Parent = self.rootModel
end


function TerrainChunk:hide()
	self.model.Parent = nil
end

function TerrainChunk:searchForBlock(tileX, tileY)
	for index, block in ipairs(self.blocks) do
		if block.left <= tileX and block.right >= tileX
			and block.top <= tileY and block.bottom >= tileY then
			return index, block
		end
	end
	
	return nil --shouldn't happen
end


function TerrainChunk:updateTile(tileX, tileY)
	-- poke block and draw
	local tileIndex = WorldConfig.tileXYtoIndex(tileX, tileY)
	local bx, by = WorldConfig.tileXYtoBinaryXY(tileX, tileY)
	
	local tileId = self.tileData[tileIndex]
	local binary = bit32.extract(self.binaryData[by], bx)
	
	local index, block = self:searchForBlock(tileX, tileY)
	local resultBlocks = block:poke(tileX, tileY, tileId, binary)
	
	table.remove(self.blocks, index)
	for _, block in pairs(resultBlocks) do
		table.insert(self.blocks, block)
		block:draw()
	end
end


return TerrainChunk]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX1D6044F995B9403F845DE42065B2CF29">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Block</string>
							<string name="ScriptGuid">{94FA72B5-23C4-4202-814A-E928B324CE4B}</string>
							<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")

local ROOT = script.Parent.Parent
local WorldConfig = require(ROOT.DataModules.WorldConfig)

local TILE_SIZE = WorldConfig.TILE_SIZE


local TileParts = ReplicatedStorage:WaitForChild("Tiles")
local id = {}
for _,v in pairs(TileParts:GetChildren()) do
	id[tonumber(v.Name)] = v
end


local Block = {}
Block.__index = Block

function Block.new(rootModel, transform, tileId, binary, left, right, top, bottom)
	local self = {
		tileId = tileId,
		binary = binary,
		
		left = left,
		right = right,
		top = top,
		bottom = bottom,
		
		rootModel = rootModel,
		transform = transform,
		part = nil
	}
	
	setmetatable(self, Block)
	return self
end

function Block:draw()
	if self.part then
		self.part:Destroy()
	end
	
	if self.tileId > 0 then
		local width = self.right - self.left + 1
		local height = self.bottom - self.top + 1
		
		local part = id[self.tileId]:Clone()
		part.Size = TILE_SIZE * Vector3.new(width, height, 1)
		part.Back.Color3 = Color3.new(1-self.binary*.3, 1-self.binary*.3, 1-self.binary*.3)
		part.CFrame = self.transform * CFrame.new(TILE_SIZE * Vector3.new(self.left + width/2, -(self.top + height/2), -self.binary))
		part.Parent = self.rootModel
		
		self.part = part
	end
end


function Block:poke(x, y, tileId, binary)
	if x < self.left or x > self.right or y < self.top or y > self.bottom then
		error("poking the wrong hole!")
	end
	
	if tileId == self.tileId and binary == self.binary then
		-- do nothing
		return {self}
	end
	
	if self.part then
		self.part:Destroy()
	end
	
	local newBlock = Block.new(self.rootModel, self.transform, tileId, binary, x, x, y, y)
	local topBlock, bottomBlock, leftBlock, rightBlock
	
	if x > self.left then
		leftBlock = Block.new(
			self.rootModel, self.transform,
			self.tileId, self.binary,
			self.left, x-1, self.top, self.bottom)
	end
	if x < self.right then
		rightBlock = Block.new(
			self.rootModel, self.transform,
			self.tileId, self.binary,
			x+1, self.right, self.top, self.bottom)
	end
	
	if y > self.top then
		topBlock = Block.new(
			self.rootModel, self.transform,
			self.tileId, self.binary,
			x, x, self.top, y-1)
	end
	if y < self.bottom then
		bottomBlock = Block.new(
			self.rootModel, self.transform,
			self.tileId, self.binary,
			x, x, y+1, self.bottom)
	end
	
	local blocks = {}
	table.insert(blocks, newBlock)
	table.insert(blocks, leftBlock)
	table.insert(blocks, rightBlock)
	table.insert(blocks, topBlock)
	table.insert(blocks, bottomBlock)
	
	-- REMOVE BIG BLOCK IF NEEDED
	-- DRAW RESULT BLOCKS AND RETURN THEM
	
	return blocks
end

return Block]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX90BDA67319E94B8FA2AFC21AFAE93D80">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">TerrainGenerationModules</string>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX0182B156EE204C2D87BF5ABF0C5373E8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">TerrainGenerator</string>
							<string name="ScriptGuid">{F224556A-ED5F-4AB7-918E-D9FAE191A87F}</string>
							<ProtectedString name="Source"><![CDATA[

local floor = math.floor

local function findThreshold(thresholds, tileIDs, value)
	local highest = thresholds[1]
	local index = 1
	
	for i = 2, #thresholds do
		local t = thresholds[i]
		if t > highest and t <= value then
			highest = t
			index = i
		end
	end
	
	return tileIDs[index]
end

--[[
local function findThreshold(thresholds, tiles, value)
	local first = 1
	local it = first
	local count, step = #thresholds, nil
	while count > 0 do
		it = first
		step = floor(count/2)
		it = it + step
		
		if thresholds[it] < value then
			it = it + 1
			first = it
			count = count - step + 1
		else
			count = step
		end
	end
	
	return first
end
]]


local TerrainGenerator = {}
TerrainGenerator.__index = TerrainGenerator

function TerrainGenerator.new(seed, thresholds, tiles)
	local self = {
		seed = seed,
		thresholds = thresholds,
		tiles = tiles,
		
		layers = {}
	}
	
	setmetatable(self, TerrainGenerator)
	return self
end

function TerrainGenerator:addImageProcessor(processor)
	table.insert(self.layers, processor)
end

function TerrainGenerator:generateTile(x, y)
	--[[
	local tile_id = -1
	for i = 1, #self.layers do
		local v = self.layers[i]:draw(x, y, self.seed)
		if v ~= -1 then
			tile_id = v
		end
	end
	return tile_id
	]]
	return findThreshold(self.thresholds, self.tiles, self.layers[1]:draw(x, y, self.seed))
end

return TerrainGenerator]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX2E194262DC304C95B3F9343F7DD658E8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Noise</string>
							<string name="ScriptGuid">{D1750460-33A2-4818-B1E2-99F003BE746D}</string>
							<ProtectedString name="Source"><![CDATA[--[[
    Implemented as described here:
    http://flafla2.github.io/2014/08/09/perlinnoise.html
]]--

local band = bit32.band
local floor = math.floor

local p = {}

-- Hash lookup table as defined by Ken Perlin
-- This is a randomly arranged array of all numbers from 0-255 inclusive
local permutation = {151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
}

-- p is used to hash unit cube coordinates to [0, 255]
for i=0,255 do
	-- Convert to 0 based index table
	p[i] = permutation[i+1]
	-- Repeat the array to avoid buffer overflow in hash function
	p[i+256] = permutation[i+1]
end

-- Gradient function finds dot product between pseudorandom gradient vector
-- and the vector from input coordinate to a unit cube vertex
local dot_product = {
    function(x,y,z) return  x + y end,
    function(x,y,z) return -x + y end,
    function(x,y,z) return  x - y end,
    function(x,y,z) return -x - y end,
    function(x,y,z) return  x + z end,
    function(x,y,z) return -x + z end,
    function(x,y,z) return  x - z end,
    function(x,y,z) return -x - z end,
    function(x,y,z) return  y + z end,
    function(x,y,z) return -y + z end,
    function(x,y,z) return  y - z end,
    function(x,y,z) return -y - z end,
    function(x,y,z) return  y + x end,
    function(x,y,z) return -y + z end,
    function(x,y,z) return  y - x end,
    function(x,y,z) return -y - z end
}

local function grad(hash, x, y, z)
    return dot_product[1+band(hash,0xF)](x,y,z)
end

local function fade(t)
    return t * t * t * (t * (t * 6 - 15) + 10)
end

local function lerp(t, a, b)
    return a + t * (b - a)
end

-- Return range: [-1, 1]
local function noise(x, y, z)
	y = y or 0
	z = z or 0
	
	-- Calculate the "unit cube" that the point asked will be located in
	local xi = band(floor(x),255)
	local yi = band(floor(y),255)
	local zi = band(floor(z),255)
	
	-- Next we calculate the location (from 0 to 1) in that cube
	x = x - floor(x)
	y = y - floor(y)
	z = z - floor(z)
	
	-- We also fade the location to smooth the result
	local u = fade(x)
	local v = fade(y)
	local w = fade(z)
	
	-- Hash all 8 unit cube coordinates surrounding input coordinate
	local p = p
	local A, AA, AB, AAA, ABA, AAB, ABB, B, BA, BB, BAA, BBA, BAB, BBB
	A   = p[xi  ] + yi
	AA  = p[A   ] + zi
	AB  = p[A+1 ] + zi
	AAA = p[ AA ]
	ABA = p[ AB ]
	AAB = p[ AA+1 ]
	ABB = p[ AB+1 ]
	
	B   = p[xi+1] + yi
	BA  = p[B   ] + zi
	BB  = p[B+1 ] + zi
	BAA = p[ BA ]
	BBA = p[ BB ]
	BAB = p[ BA+1 ]
	BBB = p[ BB+1 ]
	
	-- Take the weighted average between all 8 unit cube coordinates
	return lerp(w,
		lerp(v,
			lerp(u,
				grad(AAA,x,y,z),
				grad(BAA,x-1,y,z)
			),
			lerp(u,
				grad(ABA,x,y-1,z),
				grad(BBA,x-1,y-1,z)
			)
		),
		lerp(v,
			lerp(u,
				grad(AAB,x,y,z-1), grad(BAB,x-1,y,z-1)
			),
			lerp(u,
				grad(ABB,x,y-1,z-1), grad(BBB,x-1,y-1,z-1)
			)
		)
	)/2 + 0.5
end

return noise]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX66DD7A7C53914E88A0454643E57A9E41">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">DrawFunctions</string>
							<string name="ScriptGuid">{B02B1FC2-B337-4FBC-B2B6-F46EA8E08F48}</string>
							<ProtectedString name="Source"><![CDATA[local ROOT = script.Parent.Parent
local perlinNoise = require(ROOT.TerrainGenerationModules.Noise)


local abs = math.abs
local clamp = math.clamp
local sqrt = math.sqrt

local function lerp(a, b, t)
	return a + t*(b - a);
end



local function noise(sx, sy, ox, oy) --sx = scale x, ox = offset x
	return function(x, y, seed)
		return perlinNoise((x-ox+seed)*sx, (y-oy)*sy, 0)
	end
end

local function ball(ox, oy, r, t, inv) --t = sharpness threshold
	return function(x, y)
		local dist = sqrt((x-ox)*(x-ox) + (y-oy)*(y-oy))
		return lerp(1-inv, inv, clamp((dist/r-t)/(1-t), 0, 1))
	end
end

local function constant(v)
	return function()
		return v
	end
end

--https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line
--x0y0 black start, x1y1 white start
local function gradient(x0, y0, x1, y1)
	local cx, cy = (x0+x1)/2, (y0+y1)/2 --middle point
	local dist = sqrt((x1-x0)*(x1-x0) + (y1-y0)*(y1-y0))
	local x2, y2 = cy - y0 + cx, x0 - cx + cy --rotate 90 deg around middle to get line along gradient
	local x3, y3 = cy - y1 + cx, x1 - cx + cy
	local xx, yy = x3-x2, y3-y2 --optimization
	local x3y2, y3x2 = x3*y2, y3*x2 --optimization
	local sqxxyy = sqrt(xx*xx + yy*yy) --optimization
	
	return function(x, y)
		local dline = (yy*x - xx*y + x3y2 - y3x2) / sqxxyy --wikipedia, dist from point to line
		return clamp(.5+dline/dist, 0, 1)
	end
end


return {
	noise = noise,
	ball = ball,
	constant = constant,
	gradient = gradient,
}
]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXF1D97867E1C14E58937DF5DB8F0D7E7F">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">ImageProcessor</string>
							<string name="ScriptGuid">{F210A192-2EFB-405E-9526-1F04ED7A24BD}</string>
							<ProtectedString name="Source"><![CDATA[local min = math.min
local max = math.max
local abs = math.abs
local clamp = math.clamp

local BLEND_OPERATIONS = {
	MIX = function(a, b) return b end,
	ADD = function(a, b) return a+b end,
	SUBTRACT = function(a, b) return a-b end,
	MULTIPLY = function(a, b) return a*b end,
	SCREEN = function(a, b) return 1 - (1-a)*(1-b) end,
	DARKEN = function(a, b) return min(a, b) end, --or MIN
	LIGHTEN = function(a, b) return max(a, b) end, --or MAX
	DIFFERENCE = function(a, b) return abs(a-b) end,
	OVERLAY = function(a, b) return a<0.5 and 2*a*b or 1-2*(1-a)*(1-b) end,
	MASK = function(a, b) return a<b and 0 or 1 end,
	
	--THRESHOLD_MASK = function(a, b)
}

local function lerp(a, b, t)
	return a + t*(b - a);
end




local ImageProcessor = {}
ImageProcessor.__index = ImageProcessor

function ImageProcessor.new()
	local self = {
		layers = {}
	}
	
	setmetatable(self, ImageProcessor)
	return self
end

function ImageProcessor:blend(blendMode, opacity, drawFunc)
	table.insert(self.layers, {drawFunc, BLEND_OPERATIONS[blendMode], opacity})
end

function ImageProcessor:draw(x, y, seed)
	local result = 0
	for _, layer in ipairs(self.layers) do
		local blend = layer[2](result, layer[1](x, y, seed))
		result = clamp(lerp(result, blend, layer[3]), 0, 1)
	end
	
	return result
end

return ImageProcessor
]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXB4711861C0D04D8CB7326D448C55C2D1">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">SedimentLayers</string>
							<string name="ScriptGuid">{E71FB85E-5B3C-4954-82B6-DEAF121B6BDE}</string>
							<ProtectedString name="Source"><![CDATA[
local function copyInsert(tabFrom, tabTo)
	for _, v in ipairs(tabFrom) do
		table.insert(tabTo, v)
	end
end

local SedimentLayers = {}
SedimentLayers.__index = SedimentLayers

function SedimentLayers.new()
	local self = {
		metaData = nil,
		thresholdData = nil,
		tileData = nil,
		
		cumulativeDepth = nil,
	}
	
	setmetatable(self, SedimentLayers)
	return self
end

function SedimentLayers:processData(data)
	self.metaData = {}
	self.thresholdData = {}
	self.tileData = {}
	
	local layerCount = #data
	local cumulativeDepth = 0
	
	-- first pass, process metadata
	for index, layerData in ipairs(data) do
		local depth = layerData[3]
		self.metaData[index] = {
			index = index,
			name = layerData[1],
			description = layerData[2],
			
			top = cumulativeDepth,
			bottom = cumulativeDepth + depth,
			depth = depth,
			
			thresholds = layerData[4],
			tiles = layerData[5]
		}
		
		cumulativeDepth = cumulativeDepth + depth
	end
	
	-- second pass, to compress threshold value ranges to their own top-bottom
	for _, sedimentLayer in ipairs(self.metaData) do
		local scale = (sedimentLayer.bottom - sedimentLayer.top)/cumulativeDepth
		for __, threshold in ipairs(sedimentLayer.thresholds) do
			table.insert(self.thresholdData, sedimentLayer.top/cumulativeDepth + threshold * scale)
		end
		
		-- also add tile data
		for __, tile in ipairs(sedimentLayer.tiles) do
			table.insert(self.tileData, tile)
		end
	end
	
	print(unpack(self.thresholdData))
	self.cumulativeDepth = cumulativeDepth
end

function SedimentLayers:getLayerByIndex(index)
	return self.metaData[index]
end

function SedimentLayers:getLayerByDepth(depth)
	-- hmm?
end


	
return SedimentLayers
]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX095A9FDB9D8949348B8A557847DC1C63">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">UnitTests</string>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBXE6E4B6A50F2245A89888E1248E9D4C24">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">WorldDataTest</string>
							<string name="ScriptGuid">{5486AF1A-D5B7-44D7-BC16-669416694B40}</string>
							<ProtectedString name="Source"><![CDATA[local ROOT = script.Parent.Parent
local NexusUnitTesting = require("NexusUnitTesting")

return function()
	local WorldConfig = require(ROOT.DataModules.WorldConfig)
	
	local WorldData = require(ROOT.DataModules.WorldData)
	local TerrainGenerator = require(ROOT.TerrainGenerationModules.TerrainGenerator)
	
	describe("SetBitTest",function()
		it("should set bits correctly in first binary chunk",function()
			local data = WorldData.new()
			
			data:setBinary(7, 2, 1)
			data:setBinary(8, 2, 1)
			data:setBinary(3, 3, 0)

			expect(data:getBinary(7, 2)).to.equal(1)
			expect(data:getBinary(8, 2)).to.equal(1)
			expect(data:getBinary(3, 3)).to.equal(0)
		end)
			
		it("should set bits correctly in other binary chunks",function()
			local data = WorldData.new()
			
			data:setBinary(7, 2, 1)
			data:setBinary(46, 88, 1)
			data:setBinary(200, 400, 0)
			data:setBinary(200, 401, 1)
			data:setBinary(220, 405, 0)

			expect(data:getBinary(7, 2)).to.equal(1)
			expect(data:getBinary(46, 88)).to.equal(1)
			expect(data:getBinary(200, 400)).to.equal(0)
			expect(data:getBinary(200, 401)).to.equal(1)
			expect(data:getBinary(220, 405)).to.equal(0)
		end)
	end)
		
	describe("ChunkIteratorTest",function()
		it("should get correct values at start",function()
			local terraingen = TerrainGenerator.new()
			local data = WorldData.new(terraingen)
			data:setTile(0, 0, 4)
			data:setTile(1, 0, 2)
			data:setTile(2, 0, 3)
			
			local it = data:chunk_iterator(1)
			
			local tileId, binary, x, y, index = it()
			expect(tileId).to.equal(4)
			expect(x).to.equal(0)
			expect(y).to.equal(0)
			expect(index).to.equal(1)
			
			tileId, binary, x, y, index = it()
			expect(tileId).to.equal(2)
			expect(x).to.equal(1)
			expect(y).to.equal(0)
			expect(index).to.equal(2)
			
			tileId, binary, x, y, index = it()
			expect(tileId).to.equal(3)
			expect(x).to.equal(2)
			expect(y).to.equal(0)
			expect(index).to.equal(3)
		end)
	end)
end]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX4ACC2762E083483ABCBE484EB669CE2E">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">WorldConfigTest</string>
							<string name="ScriptGuid">{BEEC53BB-D987-486B-AB6D-69F98AB3983C}</string>
							<ProtectedString name="Source"><![CDATA[local NexusUnitTesting = require("NexusUnitTesting")
local ROOT = script.Parent.Parent

return function()
	local WorldConfig = require(ROOT.DataModules.WorldConfig)
	
	describe("chunkIndexToXY",function()
		it("should calculate correct xy",function()
			local x, y = WorldConfig.chunkIndexToXY(4)
			expect(x).to.equal(3)
			expect(y).to.equal(0)
			
			x, y = WorldConfig.chunkIndexToXY(13)
			expect(x).to.equal(4)
			expect(y).to.equal(1)
			
			x, y = WorldConfig.chunkIndexToXY(54)
			expect(x).to.equal(5)
			expect(y).to.equal(6)
		end)
		
		it("should wrap around correctly in edge cases",function()
			local x, y = WorldConfig.chunkIndexToXY(8)
			expect(x).to.equal(7)
			expect(y).to.equal(0)
			
			x, y = WorldConfig.chunkIndexToXY(9)
			expect(x).to.equal(0)
			expect(y).to.equal(1)
			
			x, y = WorldConfig.chunkIndexToXY(64)
			expect(x).to.equal(7)
			expect(y).to.equal(7)
		end)
	end)
	
	describe("chunkXYtoIndex",function()
		it("should calculate correct index",function()
			expect(WorldConfig.chunkXYtoIndex(5,0)).to.equal(6)
			expect(WorldConfig.chunkXYtoIndex(1,1)).to.equal(10)
		end)
	end)
end]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX2AF4E8F5B9D2418FA5E5EA33C472CB05">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">TerrainDisplayTest</string>
							<string name="ScriptGuid">{3477A082-C89A-4AEB-939F-8D486D454FF4}</string>
							<ProtectedString name="Source"><![CDATA[local NexusUnitTesting = require("NexusUnitTesting")
local ROOT = script.Parent.Parent

return function()
	local WorldData = require(ROOT.DataModules.WorldData)
	local TerrainDisplay = require(ROOT.TerrainDisplayModules.TerrainDisplay)
	local TerrainGenerator = require(ROOT.TerrainGenerationModules.TerrainGenerator)
	
	describe("tileToWorld",function()
		
		local transform = CFrame.new(
			0, 5, 4,
			4, 0, 0,
			0, -4, 0,
			0, 0, -4)
		
		local terrainGen = TerrainGenerator.new(0)
		local worldData = WorldData.new()
		local terrain = TerrainDisplay.new(worldData, nil, transform)
		
		it("should convert tile coords to world position",function()
			local position = terrain:tileToWorld(0, 0)
			expect(position).to.equal(Vector3.new(0, 5, 4))
			
			position = terrain:tileToWorld(6, 8)
			expect(position).to.equal(Vector3.new(24, -27, 4))
			
			position = terrain:tileToWorld(-10, 5)
			expect(position).to.equal(Vector3.new(-40, -15, 4))
		end)
			
		it("should convert world position to tile coords",function()
			local x, y = terrain:worldToTile(Vector3.new(0, 0, 4))
			expect(x).to.equal(0)
			expect(y).to.equal(-2)
			
			x, y = terrain:worldToTile(Vector3.new(8, 12, 4))
			expect(x).to.equal(2)
			expect(y).to.equal(-5)
			
			x, y = terrain:worldToTile(Vector3.new(10, -22, 4))
			expect(x).to.equal(2)
			expect(y).to.equal(7)
		end)
	end)

end]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBXC8F243C05E284C59912F5E6DEBFCED4D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">HelperModules</string>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX1507F2A75B17425D891ECC8EA253B7F6">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Timer</string>
							<string name="ScriptGuid">{A5271D0A-351B-4D5E-BB48-D21FF410AFC4}</string>
							<ProtectedString name="Source"><![CDATA[local floor = math.floor

local Timer = {}
Timer.__index = Timer

function Timer.new()
	local self = {
		tickStart = tick(),
		tickMsg = "",
	}
	
	setmetatable(self, Timer)
	return self
end

function Timer:tick(msg)
	self.tickMsg = msg .. ": " or ""
	self.tickStart = tick()
end

function Timer:tock()
	local t = tick()
	print(self.tickMsg .. floor(1000*(t - self.tickStart)) .. " ms elapsed")
end

return Timer]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX277B39C4679347A180E1B22127092275">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Signal</string>
							<string name="ScriptGuid">{46266FDD-CA7C-4CAD-85C1-03EEA00D2559}</string>
							<ProtectedString name="Source"><![CDATA[--[[
Thanks Anaminus!
https://gist.github.com/Anaminus/afd813efc819bad8e560caea28942010

# Signal

API-compatible Roblox events.

Addresses two flaws in previous implementations:

- Held a reference to the last set of fired arguments.
- Arguments would be overridden if the signal was fired by a listener.

## Synopsis

	- signal = Signal(function, function)

		Returns a new signal. Receives optional constructor and destructor
		functions. The constructor is called when the number of
		listeners/threads becomes greater than 0. The destructor is called
		when then number of threads/listeners becomes 0. The destructor
		receives as arguments the values returned by the constructor.

	- event = Signal:GetEvent()

		Get the signal's event object. Returns a SignalEvent.

	- event = Signal.Event

		API-compatible alias for GetEvent. Returns a SignalEvent.

	- Signal:Fire(...)

		Fire the signal, passing the arguments to each listener and waiting
		threads.

	- ... = Signal:Wait()

		Block the current thread until the signal is fired. Returns the
		arguments passed to Fire.

	- Signal:Destroy()

		Disconnects all listeners and becomes unassociated with currently
		blocked threads. The signal is still usable.

	- connection = SignalEvent:Connect(function)

		Sets a function to be called when the signal is fired. The listener
		function receives the arguments passed to Fire. Returns a
		SignalConnection.

	- SignalConnection:Disconnect()

		Disconnects the listener, causing it to no longer be called when the
		signal is fired.

	- bool =  SignalConnection:IsConnected()

		Returns whether the listener is connected.

	- bool = SignalConnection.Connected

		API-compatible alias for IsConnected.
		
]]


local function pack(...)
	return {n = select("#", ...), ...}
end

local mtSignalConnection = {__index={}}

function mtSignalConnection.__index:Disconnect()
	if self.conn then
		self.conn:Disconnect()
		self.conn = nil
	end
	if not self.signal then
		return
	end
	self.Connected = false
	local connections = self.signal.connections
	for i = 1, #connections do
		if connections[i] == self then
			table.remove(connections, i)
			break
		end
	end
	self.signal:destruct()
	self.signal = nil
end

function mtSignalConnection.__index:IsConnected()
	if self.conn then
		return self.conn.Connected
	end
	return false
end

----------------

local mtSignalEvent = {__index={}}

function mtSignalEvent.__index:Connect(listener)
	local signal = self.signal
	signal:construct()
	local conn = setmetatable({
		signal = signal,
		conn = signal.usignal.Event:Connect(function(id)
			local args = signal.args[id]
			args[1] = args[1] - 1
			if args[1] <= 0 then
				signal.args[id] = nil
			end
			listener(unpack(args[2], 1, args[2].n))
		end),
		Connected = true,
	}, mtSignalConnection)
	table.insert(signal.connections, conn)
	return conn
end

----------------

local mtSignal = {__index={}}

function mtSignal.__index:GetEvent()
	return self.event
end

function mtSignal.__index:Fire(...)
	local id = self.nextID
	self.nextID = self.nextID + 1
	self.args[id] = {#self.connections + self.threads, pack(...)}
	self.threads = 0
	self.usignal:Fire(id)
end

function mtSignal.__index:Wait()
	self.threads = self.threads + 1
	local id = self.usignal.Event:Wait()
	local args = self.args[id]
	args[1] = args[1] - 1
	if args[1] <= 0 then
		self.args[id] = nil
	end
	return unpack(args[2], 1, args[2].n)
end

function mtSignal.__index:Destroy()
	self.usignal:Destroy()
	self.usignal = Instance.new("BindableEvent")
	local connections = self.connections
	for i = #connections, 1, -1 do
		local conn = connections[i]
		conn.signal = nil
		conn.conn = nil
		conn.Connected = false
		connections[i] = nil
	end
	self.threads = 0
	self:destruct()
end

function mtSignal.__index:construct()
	if #self.connections > 0 then
		return
	end
	if self.ctor and not self.ctorData then
		self.ctorData = pack(self.ctor(self))
	end
end

function mtSignal.__index:destruct()
	if #self.connections > 0 then
		return
	end
	if self.dtor and self.ctorData then
		self.dtor(self, unpack(self.ctorData, 1, self.ctorData.n))
		self.ctorData = nil
	end
end

local function Signal(ctor, dtor)
	local self = {
		ctor        = ctor, -- Constructor function.
		dtor        = dtor, -- Destructor function.
		ctorData    = nil,  -- Values returned by ctor and passed dtor.
		args        = {},   -- Holds arguments for pending listener functions and threads. [id] = {#connections, #threads, {arguments}}
		nextID      = 0,    -- Holds the next args ID.
		connections = {},   -- SignalConnections connected to the signal.
		usignal     = Instance.new("BindableEvent"), -- Dispatches scheduler-compatible threads.
		threads     = 0,    -- Number of threads waiting on the signal.
	}
	self.event = setmetatable({signal = self}, mtSignalEvent)
	self.Event = self.event
	return setmetatable(self, mtSignal)
end

return Signal
]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBXC697ED1EE91C487F9F1DEC69778F9711">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">DataModules</string>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="ModuleScript" referent="RBX36A37579442C414DA2B0894D8EE5EB76">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">WorldConfig</string>
							<string name="ScriptGuid">{456DC527-664A-4A31-881E-F780906E8F1A}</string>
							<ProtectedString name="Source"><![CDATA[


--[[
	Chunk size is restricted by data store string storage
	Datastore only accepts UTF-8, which means ASCII characters ranging
	from \0 to \127. Therefore each char can store 7 bits instead of 8.
--]]
local BITS = 7
local MAX_UINT = 2^28 - 1 --ignoring the first 4 bits

local CHUNK_DIM = 4*BITS --4 chars form an integer
local CHUNK_ROW = 64
local CHUNK_COL = 8
local CHUNK_COUNT = CHUNK_ROW * CHUNK_COL  --512
local CHUNK_TILES = CHUNK_DIM * CHUNK_DIM

local MAP_X = CHUNK_DIM * CHUNK_COL  --224
local MAP_Y = CHUNK_DIM * CHUNK_ROW  --1792

local TILE_SIZE = 4



local floor = math.floor

-- Converts (chunkIndex) -> (chunkX, chunkY)
local function chunkIndexToXY(index)
	return (index-1) % CHUNK_COL, floor((index-1)/CHUNK_COL)
end
-- Converts (chunkX, chunkY) -> (chunkIndex)
local function chunkXYtoIndex(x, y)
	return 1 + y*CHUNK_COL + x
end


-- Converts (tileIndex) -> (tileX, tileY)
local function tileIndexToXY(index)
	return (index-1) % CHUNK_DIM, floor((index-1)/CHUNK_DIM)
end
-- Converts (tileX, tileY) -> (tileIndex)
local function tileXYtoIndex(x, y)
	return 1 + (y % CHUNK_DIM)*CHUNK_DIM + (x % CHUNK_DIM)
end




-- Converts (tileX, tileY) -> (chunkIndex)
local function tileXYtoChunkIndex(x, y)
	return chunkXYtoIndex(floor(x/CHUNK_DIM), floor(y/CHUNK_DIM))
end
-- Converts (tileX, tileY) -> (chunkX, chunkY)
local function tileXYtoChunkXY(x, y)
	return floor(x/CHUNK_DIM), floor(y/CHUNK_DIM)
end



-- Is this one useless?????

-- Converts (tileX, tileY) -> (binaryX, binaryY)
local function tileXYtoBinaryXY(x, y)
	return x % CHUNK_DIM, y % CHUNK_DIM + 1
end



return 
{
	BITS = BITS,
	MAX_UINT = MAX_UINT,
	
	CHUNK_DIM = CHUNK_DIM,
	CHUNK_ROW = CHUNK_ROW,
	CHUNK_COL = CHUNK_COL,
	CHUNK_COUNT = CHUNK_COUNT,
	CHUNK_TILES = CHUNK_TILES,
	
	MAP_X = MAP_X,
	MAP_Y = MAP_Y,
	TILE_SIZE = TILE_SIZE,
	
	chunkIndexToXY = chunkIndexToXY,
	chunkXYtoIndex = chunkXYtoIndex,
	
	tileIndexToXY = tileIndexToXY,
	tileXYtoIndex = tileXYtoIndex,
	
	tileXYtoChunkIndex = tileXYtoChunkIndex,
	tileXYtoChunkXY = tileXYtoChunkXY,
	
	tileXYtoBinaryXY = tileXYtoBinaryXY,
}
]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX73418671B9A74B199BCAC5878EC27A94">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">WorldData</string>
							<string name="ScriptGuid">{A622268C-97A3-4F4B-AA79-2886BE501E92}</string>
							<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")


local ROOT = script.Parent.Parent

local Signal = require(ROOT.HelperModules.Signal)
local Timer = require(ROOT.HelperModules.Timer).new()
local WorldConfig = require(ROOT.DataModules.WorldConfig)



local bor = bit32.bor
local lshift = bit32.lshift
local extract = bit32.extract
local replace = bit32.replace
local byte = string.byte
local char = string.char
local floor = math.floor
local format = string.format

-- Converts 4 character bytes to integer by chaining them together
local function charsToInt(bt0, bt1, bt2, bt3)
	return bor(lshift(bt0, 21), lshift(bt1, 14), lshift(bt2, 7), bt3)
end

-- Converts integer to string of character from the integer's four 8 bit segments
local function intToChars(int)
	return char(
		extract(int, 21, 7),
		extract(int, 14, 7),
		extract(int, 7, 7),
		extract(int, 0, 7))
end

-- Iterates through a long string and gives integers formed from each set of 4 chars
-- If input is not divisible by 4, ignores the remainder
-- Returns intCounter (starts from 0), integerData
local function string_int_iter(data)
	local size = string.len(data)
	local intCounter = -1
	
	return function()
		intCounter = intCounter + 1
		local ch = 4*intCounter + 1
		
		if ch+3 <= size then
			return intCounter, charsToInt(byte(data, ch, ch+3))
		end
	end
end







local WorldData = {}
WorldData.__index = WorldData

WorldData.new = function(terrainGen)
	local self = {
		chunkTileData = {}, --1024 integers for tileids each chunk
		chunkBinaryData = {}, --32 of 32-bit integers in each chunk
		terrainGen = terrainGen,
		
		binaryChangedSignal = Signal(),  --for terraindisplay update terrain
		tileChangedSignal = Signal(), --for terraindisplay update terrain
	}
	
	self.binaryChanged = self.binaryChangedSignal:GetEvent()
	self.tileChanged = self.tileChangedSignal:GetEvent()
	
	setmetatable(self, WorldData)
	
	self:initZeroBinaryData()
	return self
end


--efficiencyscape
local BITS = WorldConfig.BITS
local MAX_UINT = WorldConfig.MAX_UINT

local MAP_X = WorldConfig.MAP_X
local MAP_Y = WorldConfig.MAP_Y

local CHUNK_COL = WorldConfig.CHUNK_COL
local CHUNK_ROW = WorldConfig.CHUNK_ROW
local CHUNK_DIM = WorldConfig.CHUNK_DIM
local CHUNK_TILES = WorldConfig.CHUNK_TILES
local CHUNK_COUNT = WorldConfig.CHUNK_COUNT


-- Iterates through all chunk items
-- gives tileId, binary, x, y, tileIndex
function WorldData:chunk_iterator(chunkIndex)
	local index = -1
	local tile = self.chunkTileData[chunkIndex]
	local binary = self.chunkBinaryData[chunkIndex]
	
	return function()
		index = index + 1
		local x = index % CHUNK_DIM
		local y = floor(index/CHUNK_DIM)
		
		if index < CHUNK_TILES then
			--print(y)
			return tile[index+1], extract(binary[y+1], x), x, y, index+1
		end
	end
end




-- MEMBER FUNCTIONS


function WorldData:initZeroBinaryData()
	for chunkIndex = 1, CHUNK_COUNT do
		self.chunkBinaryData[chunkIndex] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	end
end


local function inBounds(x, y)
	if x < 0 or y < 0 or x >= WorldConfig.MAP_X or y >= WorldConfig.MAP_Y then
		return false
	end
	return true
end

function WorldData:getBinary(x, y)
	if not inBounds(x, y) then
		return nil
	end
	
	local chunk = self.chunkBinaryData[WorldConfig.tileXYtoChunkIndex(x, y)] --checks?
	local col, row = WorldConfig.tileXYtoBinaryXY(x, y)

	return extract(chunk[row], col)
end

function WorldData:getTile(x, y)
	if not inBounds(x, y) then
		return nil
	end
	
	local chunk = self:getTileChunk(x, y)
	return chunk[WorldConfig.tileXYtoIndex(x, y)]
end

function WorldData:setBinary(x, y, bit)
	if not inBounds(x, y) then
		return nil
	end
	
	local chunk = self.chunkBinaryData[WorldConfig.tileXYtoChunkIndex(x, y)] --checks?
	local col, row = WorldConfig.tileXYtoBinaryXY(x, y)
	chunk[row] = replace(chunk[row], bit, col)
	
	self.binaryChangedSignal:Fire(x, y, bit)
end

function WorldData:setTile(x, y, tileId)
	if not inBounds(x, y) then
		return nil
	end
	
	local chunk = self:getTileChunk(x, y)
	chunk[WorldConfig.tileXYtoIndex(x, y)] = tileId
	
	self.tileChangedSignal:Fire(x, y, tileId)
end





function WorldData:loadBinaryData(dataString)
	local chunkBuffer = {}
	for counter, int in string_int_iter(dataString) do
		local chunkIndex = floor(counter/CHUNK_DIM)
		local chunkCol = chunkIndex % CHUNK_COL
		local chunkRow = floor(counter/MAP_X)
		
		table.insert(chunkBuffer, int)
		
		if counter % CHUNK_DIM == CHUNK_DIM-1 then --end of chunk
			self.chunkBinaryData[chunkIndex+1] = chunkBuffer
			chunkBuffer = {}
			
		--	print(format("loaded chunk %d, %d data", chunk_col, chunk_row))
		--elseif counter % CHUNK_DIM == 0 then
		--	print(format("started loading chunk %d, %d data", chunk_col, chunk_row))
		end
	end
end

function WorldData:loadSaveFile(saveFileDataString)
	local save = HttpService:JSONDecode(saveFileDataString)
	--json shit
end


function WorldData:binaryDataToString()
	local saveStringBuffer = {}
	
	-- saving chunk at a time
	for chunk_index = 1, CHUNK_COUNT do
		local chunk = self.chunkBinaryData[chunk_index]
		for row = 1, CHUNK_DIM do
			table.insert(saveStringBuffer, intToChars(chunk[row]))
		end
	end
	
	return table.concat(saveStringBuffer)
end

function WorldData:generateChunk(x, y)
	local tileChunk = {}
	
	for index = 0, CHUNK_TILES-1 do
		local tx, ty = WorldConfig.tileIndexToXY(index+1)
		tileChunk[index+1] = self.terrainGen:generateTile(x*CHUNK_DIM+tx, y*CHUNK_DIM+ty)
	end
	
	self.chunkTileData[WorldConfig.chunkXYtoIndex(x, y)] = tileChunk
	return tileChunk
end

function WorldData:loadChunk(x, y)
	local chunk = self.chunkTileData[WorldConfig.chunkXYtoIndex(x, y)]
	if chunk == nil then
		chunk = self:generateChunk(x, y)
	end
	
	return chunk
end

function WorldData:getTileChunk(x, y)
	return self:loadChunk(WorldConfig.tileXYtoChunkXY(x, y))
end

function WorldData:unloadChunk(x, y)
	--lets just keep it in memory instead for now, but fire event so terrain is hidden
end

return WorldData]]></ProtectedString>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="Folder" referent="RBX6E597356DFC647CEB94CEAB20FAD3DA6">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<string name="Name">SedimentDataSets</string>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
						<Item class="ModuleScript" referent="RBXFBF69AD85BA24347870B79C02D4CC383">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">SedimentData1</string>
								<string name="ScriptGuid">{B6F9CAF4-B130-4CA9-AAFB-152595FA94FA}</string>
								<ProtectedString name="Source"><![CDATA[return {
	{"Surface", "It's time to get underground!", 30,
		{0, 0.25, 0.285, 0.38},
		{0, 1, 2, 3}
	},
	{"Underground", "Getting a little dark in here...", 100,
		{0, 0.45, 0.55},
		{6, 6, 6}
	},
	{"Underground 2", "Getting a darker...", 100,
		{0, 0.4, 0.5},
		{4, 4, 4}
	},
	{"Mystery", "What is this place?", 100,
		{0, 0.4, 0.7},
		{9, 9, 9}
	},
	{"Mystery", "What is this place?", 100,
		{0, 0.4, 0.7},
		{11, 11, 11}
	},
	{"Mystery", "What is this place?", 100,
		{0, 0.4, 0.7},
		{12, 12, 12}
	},
	{"Mystery", "What is this place?", 100,
		{0, 0.4, 0.7},
		{14, 14, 14}
	},
	{"Mystery", "What is this place?", 100,
		{0, 0.4, 0.7},
		{15, 15, 15}
	},
}
]]></ProtectedString>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
		</Item>
		<Item class="StarterCharacterScripts" referent="RBX547630C206C946CABFA4EA6435E0574B">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterCharacterScripts</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBXC2ED8650C0FA49998C001D297F527AE2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterPack</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="StarterGui" referent="RBX5CBA1CC0A0E4420BAA1D14C5B712AE58">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterGui</string>
			<bool name="ResetPlayerGuiOnSpawn">true</bool>
			<token name="ScreenOrientation">2</token>
			<bool name="ShowDevelopmentGui">true</bool>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="LocalizationService" referent="RBX3E8E10FA42A745B6BBACAA7B10AA52C3">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LocalizationService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX2F2B5EB24F8C4D97950EB93F7E08ED44">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teleport Service</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBXEDB3186E45A343498034D40CE4F804C2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CollectionService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBXD2D688AC64594BCAB7AF5CB41772A754">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PhysicsService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX4793B8D8A34147E08CBCE539A8AB1260">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Geometry</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="InsertService" referent="RBX9D9C5F511F3D468F97D610F7AC364AB2">
		<Properties>
			<bool name="AllowClientInsertModels">false</bool>
			<bool name="AllowInsertFreeModels">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">InsertService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="GamePassService" referent="RBXD3293623F8494A479DA69846F3B62943">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GamePassService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX5FFBD96FEE3D4DFC97B5FA4B1C2E2061">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX1822B82A3128474C84D680C83EE3709E">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CookiesService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="VRService" referent="RBX759A50FE260C4BE39B983BBC86AA114F">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VRService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBX369495AA9BF6419DA17D8C1EA1276908">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ContextActionService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBX668E87CD3488411C88117FBC5A4BFDC2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="AssetService" referent="RBX0B277644BF8E416D8B0F98FE28CABB96">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AssetService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TouchInputService" referent="RBX7FCC4724A69242FD90FF4C3CC028A74D">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TouchInputService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Selection" referent="RBX4E1F5F46003C47A4BF206AAFF8F2CAEA">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Selection</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ServerScriptService" referent="RBX3EAD7140CE8641EAADBAB2CD5096FB0F">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="LoadStringEnabled">false</bool>
			<string name="Name">ServerScriptService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBX8921C5A769C84BE79E994F26C62D05A2">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">DataStoreService</string>
				<string name="ScriptGuid">{026737CD-2255-4D63-A8A2-C7E9B4A0C2FB}</string>
				<ProtectedString name="Source"><![CDATA[--[[
	DataStoreService.lua
	This module decides whether to use actual datastores or mock datastores depending on the environment.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

local MockDataStoreServiceModule = script.MockDataStoreService

local shouldUseMock = false
if game.GameId == 0 then -- Local place file
	shouldUseMock = true
elseif game:GetService("RunService"):IsStudio() then -- Published file in Studio
	local status, message = pcall(function()
		-- This will error if current instance has no Studio API access:
		game:GetService("DataStoreService"):GetDataStore("__TEST"):SetAsync("__TEST", "__TEST_" .. os.time())
	end)
	if not status and message:find("403", 1, true) then -- HACK
		-- Can connect to datastores, but no API access
		shouldUseMock = true
	end
end

-- Return the mock or actual service depending on environment:
if shouldUseMock then
	warn("INFO: Using MockDataStoreService instead of DataStoreService")
	return require(MockDataStoreServiceModule)
else
	return game:GetService("DataStoreService")
end
]]></ProtectedString>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX39D94EB243A347488614C37C1AEDD02B">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">MockDataStoreService</string>
					<string name="ScriptGuid">{938DF096-86B2-412C-A948-04AD2816B64D}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	MockDataStoreService.lua
	This module implements the API and functionality of Roblox's DataStoreService class.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

local MockDataStoreService = {}

local MockDataStoreManager = require(script.MockDataStoreManager)
local MockGlobalDataStore = require(script.MockGlobalDataStore)
local MockOrderedDataStore = require(script.MockOrderedDataStore)
local Constants = require(script.MockDataStoreConstants)

local function makeGetWrapper(methodName, getObject, isGlobal) -- Helper function to reduce amount of redundant code
	return function(_, name, scope)
		if not game:GetService("RunService"):IsServer() then
			error("DataStore can't be accessed from client", 2)
		end

		if isGlobal then
			return getObject()
		else
			if type(name) ~= "string" then
				error(("bad argument #1 to '%s' (string expected, got %s)")
					:format(methodName, typeof(name)), 2)
			elseif scope ~= nil and type(scope) ~= "string" then
				error(("bad argument #2 to '%s' (string expected, got %s)")
					:format(methodName, typeof(scope)), 2)
			elseif #name == 0 then
				error(("bad argument #1 to '%s' (name can't be empty string)")
					:format(methodName), 2)
			elseif #name > Constants.MAX_LENGTH_NAME then
				error(("bad argument #1 to '%s' (name exceeds %d character limit)")
					:format(methodName, Constants.MAX_LENGTH_NAME), 2)
			elseif scope and #scope == 0 then
				error(("bad argument #2 to '%s' (scope can't be empty string)")
					:format(methodName), 2)
			elseif scope and #scope > Constants.MAX_LENGTH_SCOPE then
				error(("bad argument #2 to '%s' (scope exceeds %d character limit)")
					:format(methodName, Constants.MAX_LENGTH_SCOPE), 2)
			end
			return getObject(name, scope or "global")
		end

	end
end

MockDataStoreService.GetGlobalDataStore = makeGetWrapper(
	"GetGlobalDataStore",
    function()
        local data = MockDataStoreManager.GetGlobalData()

        local interface = MockDataStoreManager.GetDataInterface(data)
        if interface then
            return interface
        end

        local value = {
			__type = "GlobalDataStore";
            __data = data; -- Mapping from <key> to <value>
            __event = Instance.new("BindableEvent"); -- For OnUpdate
			__writeCache = {};
			__writeLock = {};
			__getCache = {};
        }
        interface = setmetatable(value, MockGlobalDataStore)
		MockDataStoreManager.SetDataInterface(data, interface)

		return interface
	end,
	true -- This is the global datastore, no name/scope needed
)

MockDataStoreService.GetDataStore = makeGetWrapper(
	"GetDataStore",
	function(name, scope)
        local data = MockDataStoreManager.GetData(name, scope)

        local interface = MockDataStoreManager.GetDataInterface(data)
        if interface then
            return interface
        end

        local value = {
			__type = "GlobalDataStore";
            __name = name;
            __scope = scope;
            __data = data; -- Mapping from <key> to <value>
            __event = Instance.new("BindableEvent"); -- For OnUpdate
			__writeCache = {};
			__writeLock = {};
			__getCache = {};
        }
        interface = setmetatable(value, MockGlobalDataStore)
		MockDataStoreManager.SetDataInterface(data, interface)

        return interface
	end
)

MockDataStoreService.GetOrderedDataStore = makeGetWrapper(
	"GetOrderedDataStore",
	function(name, scope)
        local data = MockDataStoreManager.GetOrderedData(name, scope)

        local interface = MockDataStoreManager.GetDataInterface(data)
        if interface then
            return interface
        end

        local value = {
			__type = "OrderedDataStore";
            __name = name;
            __scope = scope;
            __data = data; -- Mapping from <key> to <value>
            __sorted = {}; -- List of {Key = <key>, Value = <value>} pairs
            __ref = {}; -- Mapping from <key> to corresponding {Key = <key>, Value = <value>} entry in __sorted
            __changed = false; -- Whether __sorted is guaranteed sorted at the moment
            __event = Instance.new("BindableEvent"); -- For OnUpdate
			__writeCache = {};
			__writeLock = {};
			__getCache = {};
        }
        interface = setmetatable(value, MockOrderedDataStore)
		MockDataStoreManager.SetDataInterface(data, interface)

		return interface
	end
)

local DataStoreRequestTypes = {}

for _, Enumerator in ipairs(Enum.DataStoreRequestType:GetEnumItems()) do
	DataStoreRequestTypes[Enumerator] = Enumerator
	DataStoreRequestTypes[Enumerator.Name] = Enumerator
	DataStoreRequestTypes[Enumerator.Value] = Enumerator
end

function MockDataStoreService:GetRequestBudgetForRequestType(requestType) -- luacheck: ignore self
	if not DataStoreRequestTypes[requestType] then
		error(("bad argument #1 to 'GetRequestBudgetForRequestType' (unable to cast '%s' of type %s to DataStoreRequestType)")
			:format(tostring(requestType), typeof(requestType)), 2)
	end

	return MockDataStoreManager.GetBudget(DataStoreRequestTypes[requestType])
end

function MockDataStoreService:ImportFromJSON(...) -- luacheck: ignore self
	return MockDataStoreManager.ImportFromJSON(...)
end

function MockDataStoreService:ExportToJSON(...) -- luacheck: ignore self
	return MockDataStoreManager.ExportToJSON(...)
end

return MockDataStoreService]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX08EB66A8E8D544249117B5E60046E3B4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MockDataStoreConstants</string>
						<string name="ScriptGuid">{D2C8907B-8ACF-4CDA-AF78-145C28D076B9}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	MockDataStoreConstants.lua
	Contains all constants used by the entirety of MockDataStoreService and its sub-classes.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

return {

    LOGGING_ENABLED = false;        -- Verbose logging of transactions to output
    LOGGING_FUNCTION = warn;        -- Function for logging messages

    MAX_LENGTH_KEY = 49;			-- Max number of chars in key string
    MAX_LENGTH_NAME = 50;			-- Max number of chars in name string
    MAX_LENGTH_SCOPE = 50;			-- Max number of chars in scope string
    MAX_LENGTH_DATA = 260e3;		-- Max number of chars in (encoded) data strings

    MAX_PAGE_SIZE = 100;			-- Max page size for GetSortedAsync

    YIELD_TIME_MIN = 0.2;			-- Random yield time values for set/get/update/remove/getsorted
    YIELD_TIME_MAX = 0.5;

    YIELD_TIME_UPDATE_MIN = 0.2;	-- Random yield times from events from OnUpdate
    YIELD_TIME_UPDATE_MAX = 0.5;

    WRITE_COOLDOWN = 6.0;			-- Amount of cooldown time between writes on the same key in a particular datastore

    GET_COOLDOWN = 5.0;		    	-- Amount of cooldown time that a recent interaction with a key is considered fresh

	THROTTLE_QUEUE_SIZE = 30;		-- Amount of requests that can be throttled at once (additional requests will error)

	SIMULATE_ERROR_RATE = 0;		-- Rate at which requests will throw errors for testing (0 = never, 1 = always)

    BUDGETING_ENABLED = true;		-- Whether budgets are enforced and calculated

    BUDGET_GETASYNC = {				-- Budget constant storing structure
        START = 100;			    	-- Starting budget
        RATE = 60;				    	-- Added budget per minute
        RATE_PLR = 10;			    	-- Additional added budget per minute per player
        MAX_FACTOR = 3;			    	-- The maximum budget as a factor of (rate + rate_plr * #players)
    };

    BUDGET_GETSORTEDASYNC = {
        START = 10;
        RATE = 5;
        RATE_PLR = 2;
        MAX_FACTOR = 3;
    };

    BUDGET_ONUPDATE = {
        START = 30;
        RATE = 30;
        RATE_PLR = 5;
        MAX_FACTOR = 1;
    };

    BUDGET_SETINCREMENTASYNC = {
        START = 100;
        RATE = 60;
        RATE_PLR = 10;
        MAX_FACTOR = 3;
    };

    BUDGET_SETINCREMENTSORTEDASYNC = {
        START = 50;
        RATE = 30;
        RATE_PLR = 5;
        MAX_FACTOR = 3;
	};

    BUDGET_BASE = 60;               -- Modifiers used for budget increases on OnClose
    BUDGET_ONCLOSE_BASE = 150;

    BUDGET_UPDATE_INTERVAL = 1.0;	-- Time interval in seconds at which budgets are updated (do not put too low)

}
]]></ProtectedString>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX35FF3C75852F45C087800C766D871C6E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MockDataStoreManager</string>
						<string name="ScriptGuid">{B41C2FDB-905B-4182-87AD-28DDCBB9394D}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	MockDataStoreManager.lua
	This module does bookkeeping of data, interfaces and request limits used by MockDataStoreService and its sub-classes.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

local MockDataStoreManager = {}

local Utils = require(script.Parent.MockDataStoreUtils)
local Constants = require(script.Parent.MockDataStoreConstants)
local HttpService = game:GetService("HttpService") -- for json encode/decode
local Players = game:GetService("Players") -- for restoring budgets
local RunService = game:GetService("RunService") -- for checking if running context is on server

local ConstantsMapping = {
	[Enum.DataStoreRequestType.GetAsync] = Constants.BUDGET_GETASYNC;
	[Enum.DataStoreRequestType.GetSortedAsync] = Constants.BUDGET_GETSORTEDASYNC;
	[Enum.DataStoreRequestType.OnUpdate] = Constants.BUDGET_ONUPDATE;
	[Enum.DataStoreRequestType.SetIncrementAsync] = Constants.BUDGET_SETINCREMENTASYNC;
	[Enum.DataStoreRequestType.SetIncrementSortedAsync] = Constants.BUDGET_SETINCREMENTSORTEDASYNC;
}

-- Bookkeeping of all data:
local Data = {
	GlobalDataStore = {};
	DataStore = {};
	OrderedDataStore = {};
}

-- Bookkeeping of all active GlobalDataStore/OrderedDataStore interfaces indexed by data table:
local Interfaces = {}

-- Request limit bookkeeping:
local Budgets = {}

local budgetRequestQueues = {
	[Enum.DataStoreRequestType.GetAsync] = {};
	[Enum.DataStoreRequestType.GetSortedAsync] = {};
	[Enum.DataStoreRequestType.OnUpdate] = {};
	[Enum.DataStoreRequestType.SetIncrementAsync] = {};
	[Enum.DataStoreRequestType.SetIncrementSortedAsync] = {};
}

local function initBudget()
	for requestType, const in pairs(ConstantsMapping) do
		Budgets[requestType] = const.START
	end
	Budgets[Enum.DataStoreRequestType.UpdateAsync] = math.min(
		Budgets[Enum.DataStoreRequestType.GetAsync],
		Budgets[Enum.DataStoreRequestType.SetIncrementAsync]
	)
end

local function updateBudget(req, const, dt, n)
	if not Constants.BUDGETING_ENABLED then
		return
	end
	local rate = const.RATE + n * const.RATE_PLR
	Budgets[req] = math.min(
		Budgets[req] + dt * rate,
		const.MAX_FACTOR * rate
	)
end

local function stealBudget(budget)
	if not Constants.BUDGETING_ENABLED then
		return
	end
	for _, requestType in pairs(budget) do
		if Budgets[requestType] then
			Budgets[requestType] = math.max(0, Budgets[requestType] - 1)
		end
	end
	Budgets[Enum.DataStoreRequestType.UpdateAsync] = math.min(
		Budgets[Enum.DataStoreRequestType.GetAsync],
		Budgets[Enum.DataStoreRequestType.SetIncrementAsync]
	)
end

local function checkBudget(budget)
	if not Constants.BUDGETING_ENABLED then
		return true
	end
	for _, requestType in pairs(budget) do
		if Budgets[requestType] and Budgets[requestType] < 1 then
			return false
		end
	end
	return true
end

if RunService:IsServer() then
	-- Only do budget/throttle updating on server (in case package required on client)

	initBudget()

	delay(0, function() -- Thread that increases budgets and de-throttles requests periodically
		local lastCheck = tick()
		while wait(Constants.BUDGET_UPDATE_INTERVAL) do
			local now = tick()
			local dt = (now - lastCheck) / 60
			lastCheck = now
			local n = #Players:GetPlayers()

			for requestType, const in pairs(ConstantsMapping) do
				updateBudget(requestType, const, dt, n)
			end
			Budgets[Enum.DataStoreRequestType.UpdateAsync] = math.min(
				Budgets[Enum.DataStoreRequestType.GetAsync],
				Budgets[Enum.DataStoreRequestType.SetIncrementAsync]
			)

			for _, budgetRequestQueue in pairs(budgetRequestQueues) do
				for i = #budgetRequestQueue, 1, -1 do
					local request = budgetRequestQueue[i]

					local thread = request.Thread
					local budget = request.Budget
					local key = request.Key
					local lock = request.Lock
					local cache = request.Cache

					if not (lock and (lock[key] or tick() - (cache[key] or 0) < Constants.WRITE_COOLDOWN)) and checkBudget(budget) then
						table.remove(budgetRequestQueue, i)
						stealBudget(budget)
						coroutine.resume(thread)
					end
				end
			end
		end
	end)

	game:BindToClose(function()
		for requestType, const in pairs(ConstantsMapping) do
			Budgets[requestType] = math.max(
				Budgets[requestType],
				Constants.BUDGET_ONCLOSE_BASE * (const.RATE / Constants.BUDGET_BASE)
			)
		end
		Budgets[Enum.DataStoreRequestType.UpdateAsync] = math.min(
			Budgets[Enum.DataStoreRequestType.GetAsync],
			Budgets[Enum.DataStoreRequestType.SetIncrementAsync]
		)
	end)

end

function MockDataStoreManager.GetGlobalData()
	return Data.GlobalDataStore
end

function MockDataStoreManager.GetData(name, scope)
	assert(type(name) == "string")
	assert(type(scope) == "string")

	if not Data.DataStore[name] then
		Data.DataStore[name] = {}
	end
	if not Data.DataStore[name][scope] then
		Data.DataStore[name][scope] = {}
	end

	return Data.DataStore[name][scope]
end

function MockDataStoreManager.GetOrderedData(name, scope)
	assert(type(name) == "string")
	assert(type(scope) == "string")

	if not Data.OrderedDataStore[name] then
		Data.OrderedDataStore[name] = {}
	end
	if not Data.OrderedDataStore[name][scope] then
		Data.OrderedDataStore[name][scope] = {}
	end

	return Data.OrderedDataStore[name][scope]
end

function MockDataStoreManager.GetDataInterface(data)
	return Interfaces[data]
end

function MockDataStoreManager.SetDataInterface(data, interface)
	assert(type(data) == "table")
	assert(type(interface) == "table")

	Interfaces[data] = interface
end

function MockDataStoreManager.GetBudget(requestType)
	if Constants.BUDGETING_ENABLED then
		return math.floor(Budgets[requestType] or 0)
	else
		return math.huge
	end
end

function MockDataStoreManager.YieldForWriteLockAndBudget(callback, key, writeLock, writeCache, budget)
	assert(type(callback) == "function")
	assert(type(key) == "string")
	assert(type(writeLock) == "table")
	assert(type(writeCache) == "table")
	assert(#budget > 0)

	local mainRequestType = budget[1]

	if #budgetRequestQueues[mainRequestType] >= Constants.THROTTLE_QUEUE_SIZE then
		return false -- no room in throttle queue
	end

	callback() -- would i.e. trigger a warning in output

	table.insert(budgetRequestQueues[mainRequestType], 1, {
		Key = key;
		Lock = writeLock;
		Cache = writeCache;
		Thread = coroutine.running();
		Budget = budget;
	})
	coroutine.yield()

	return true
end

function MockDataStoreManager.YieldForBudget(callback, budget)
	assert(type(callback) == "function")
	assert(#budget > 0)

	local mainRequestType = budget[1]

	if checkBudget(budget) then
		stealBudget(budget)
	elseif #budgetRequestQueues[mainRequestType] >= Constants.THROTTLE_QUEUE_SIZE then
		return false -- no room in throttle queue
	else
		callback() -- would i.e. trigger a warning in output

		table.insert(budgetRequestQueues[mainRequestType], 1, {
			After = 0; -- no write lock
			Thread = coroutine.running();
			Budget = budget;
		})
		coroutine.yield()
	end

	return true
end

function MockDataStoreManager.ExportToJSON()
	local export = {}

	if next(Data.GlobalDataStore) ~= nil then -- GlobalDataStore not empty
		export.GlobalDataStore = Data.GlobalDataStore
	end
	export.DataStore = Utils.prepareDataStoresForExport(Data.DataStore) -- can be nil
	export.OrderedDataStore = Utils.prepareDataStoresForExport(Data.OrderedDataStore) -- can be nil

	return HttpService:JSONEncode(export)
end

-- Import into an entire datastore type:
local function importDataStoresFromTable(origin, destination, warnFunc, methodName, prefix, isOrdered)
	for name, scopes in pairs(origin) do
		if type(name) ~= "string" then
			warnFunc(("%s: ignored %s > %q (name is not a string, but a %s)")
				:format(methodName, prefix, tostring(name), typeof(name)))
		elseif type(scopes) ~= "table" then
			warnFunc(("%s: ignored %s > %q (scope list is not a table, but a %s)")
				:format(methodName, prefix, name, typeof(scopes)))
		elseif #name == 0 then
			warnFunc(("%s: ignored %s > %q (name is an empty string)")
				:format(methodName, prefix, name))
		elseif #name > Constants.MAX_LENGTH_NAME then
			warnFunc(("%s: ignored %s > %q (name exceeds %d character limit)")
				:format(methodName, prefix, name, Constants.MAX_LENGTH_NAME))
		else
			for scope, data in pairs(scopes) do
				if type(scope) ~= "string" then
					warnFunc(("%s: ignored %s > %q > %q (scope is not a string, but a %s)")
						:format(methodName, prefix, name, tostring(scope), typeof(scope)))
				elseif type(data) ~= "table" then
					warnFunc(("%s: ignored %s > %q > %q (data list is not a table, but a %s)")
						:format(methodName, prefix, name, scope, typeof(data)))
				elseif #scope == 0 then
					warnFunc(("%s: ignored %s > %q > %q (scope is an empty string)")
						:format(methodName, prefix, name, scope))
				elseif #scope > Constants.MAX_LENGTH_SCOPE then
					warnFunc(("%s: ignored %s > %q > %q (scope exceeds %d character limit)")
						:format(methodName, prefix, name, scope, Constants.MAX_LENGTH_SCOPE))
				else
					if not destination[name] then
						destination[name] = {}
					end
					if not destination[name][scope] then
						destination[name][scope] = {}
					end
					Utils.importPairsFromTable(
						data,
						destination[name][scope],
						Interfaces[destination[name][scope]],
						warnFunc,
						methodName,
						("%s > %q > %q"):format(prefix, name, scope),
						isOrdered
					)
				end
			end
		end
	end
end

function MockDataStoreManager.ImportFromJSON(json, verbose)
	local content
	if type(json) == "string" then
		local parsed, value = pcall(function() return HttpService:JSONDecode(json) end)
		if not parsed then
			error("bad argument #1 to 'ImportFromJSON' (string is not valid json)", 2)
		end
		content = value
	elseif type(json) == "table" then
		content = Utils.deepcopy(json)
	else
		error(("bad argument #1 to 'ImportFromJSON' (string or table expected, got %s)"):format(typeof(json)), 2)
	end

	local warnFunc = warn -- assume verbose as default
	if verbose == false then -- intentional formatting
		warnFunc = function() end
	end

	if type(content.GlobalDataStore) == "table" then
		Utils.importPairsFromTable(
			content.GlobalDataStore,
			Data.GlobalDataStore,
			Interfaces[Data.GlobalDataStore],
			warnFunc,
			"ImportFromJSON",
			"GlobalDataStore",
			false
		)
	end
	if type(content.DataStore) == "table" then
		importDataStoresFromTable(
			content.DataStore,
			Data.DataStore,
			warnFunc,
			"ImportFromJSON",
			"DataStore",
			false
		)
	end
	if type(content.OrderedDataStore) == "table" then
		importDataStoresFromTable(
			content.OrderedDataStore,
			Data.OrderedDataStore,
			warnFunc,
			"ImportFromJSON",
			"OrderedDataStore",
			true
		)
	end
end

return MockDataStoreManager
]]></ProtectedString>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX4E6F61660A074AD683FD9952A757C534">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MockDataStorePages</string>
						<string name="ScriptGuid">{E8E5F623-A3D9-456D-8D48-0A52A513882A}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	MockDataStorePages.lua
	This module implements the API and functionality of Roblox's DataStorePages class.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

local MockDataStorePages = {}
MockDataStorePages.__index = MockDataStorePages

local MockDataStoreManager = require(script.Parent.MockDataStoreManager)
local Utils = require(script.Parent.MockDataStoreUtils)

function MockDataStorePages:GetCurrentPage()
	local retValue = {}

	local minimumIndex = math.max(1, (self.__currentPage - 1) * self.__pageSize + 1)
	local maximumIndex = math.min(self.__currentPage * self.__pageSize, #self.__results)
	for i = minimumIndex, maximumIndex do
		table.insert(retValue, self.__results[i]) -- No need to deepcopy, results only contains numbers
	end

	return retValue
end

function MockDataStorePages:AdvanceToNextPageAsync()
	if self.IsFinished then
		error("AdvanceToNextPageAsync rejected with error (no pages to advance to)", 2)
	end

	Utils.simulateErrorCheck("AdvanceToNextPageAsync")

	local success = MockDataStoreManager.YieldForBudget(
		function()
			warn("AdvanceToNextPageAsync request was throttled due to lack of budget. Try sending fewer requests.")
		end,
		{Enum.DataStoreRequestType.GetAsync}
	)

	if not success then
		error("AdvanceToNextPageAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	Utils.simulateYield()

	if #self.__results > self.__currentPage * self.__pageSize then
		self.__currentPage = self.__currentPage + 1
	end
	self.IsFinished = #self.__results <= self.__currentPage * self.__pageSize

	Utils.logMethod(self.__datastore, "AdvanceToNextPageAsync")

end

return MockDataStorePages
]]></ProtectedString>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX9DEEA7637C6B46B8A12A197D4D2E976D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MockDataStoreUtils</string>
						<string name="ScriptGuid">{0F86769E-412C-4769-90EC-3DE3B6604141}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	MockDataStoreUtils.lua
	Contains helper and utility functions used by other classes.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

local MockDataStoreUtils = {}

local Constants = require(script.Parent.MockDataStoreConstants)
local HttpService = game:GetService("HttpService") -- for json encode/decode

local rand = Random.new()

local function shorten(s, num)
	if #s > num then
		return s:sub(1,num-2) .. ".."
	end
	return s
end

--[[
	[DataStore] [Name/Scope] [GetAsync] KEY
	[DataStore] [Name/Scope] [UpdateAsync] KEY => VALUE
	[DataStore] [Name/Scope] [SetAsync] KEY => VALUE
	[DataStore] [Name/Scope] [IncrementAsync] KEY by INCR => VALUE
	[DataStore] [Name/Scope] [RemoveAsync] KEY =/> VALUE
	[DataStore] [Name/Scope] [OnUpdate] KEY
	[DataStore] [Name/Scope] [GetSortedAsync]

	[OrderedDataStore] [Name/Scope] [GetAsync] KEY
	[OrderedDataStore] [Name/Scope] [UpdateAsync] KEY => VALUE
	[OrderedDataStore] [Name/Scope] [SetAsync] KEY => VALUE
	[OrderedDataStore] [Name/Scope] [IncrementAsync] KEY + INCR => VALUE
	[OrderedDataStore] [Name/Scope] [RemoveAsync] KEY =/> VALUE
	[OrderedDataStore] [Name/Scope] [OnUpdate] KEY
	[OrderedDataStore] [Name/Scope] [GetSortedAsync]

	[OrderedDataStore] [Name/Scope] [AdvanceToNextPageAsync]
]]

local function logMethod(self, method, key, value, increment)
	if not Constants.LOGGING_ENABLED or type(Constants.LOGGING_FUNCTION) ~= "function" then
		return
	end

	local name = self.__name
	local scope = self.__scope

	local prefix
	if not name then
		prefix = ("[GlobalDataStore] [%s]"):format(method)
	elseif not scope then
		prefix = ("[%s] [%s] [%s]"):format(self.__type, shorten(name, 20), method)
	else
		prefix = ("[%s] [%s/%s] [%s]"):format(self.__type, shorten(name, 15), shorten(scope, 15), method)
	end

	local message
	if value and increment then
		message = key .. " + " .. tostring(increment) .. " => " .. tostring(value)
	elseif increment then
		message = key .. " + " .. tostring(increment)
	elseif value then
		if method == "RemoveAsync" then
			message = key .. " =/> " .. tostring(value)
		else
			message = key .. " => " .. tostring(value)
		end
	else
		message = "key"
	end

	Constants.LOGGING_FUNCTION(prefix .. " " .. message)

end

local function deepcopy(t)
	if type(t) == "table" then
		local n = {}
		for i,v in pairs(t) do
			n[i] = deepcopy(v)
		end
		return n
	else
		return t
	end
end

local function scanValidity(tbl, passed, path) -- Credit to Corecii (edited)
	if type(tbl) ~= "table" then
		return scanValidity({input = tbl}, {}, {})
	end
	passed, path = passed or {}, path or {"root"}
	passed[tbl] = true
	local tblType
	do
		local key = next(tbl)
		if type(key) == "number" then
			tblType = "Array"
		else
			tblType = "Dictionary"
		end
	end
	local last = 0
	for key, value in next, tbl do
		path[#path + 1] = tostring(key)
		if type(key) == "number" then
			if tblType == "Dictionary" then
				return false, path, "cannot store mixed tables"
			elseif key % 1 ~= 0 then
				return false, path, "cannot store tables with non-integer indices"
			elseif key == math.huge or key == -math.huge then
				return false, path, "cannot store tables with (-)infinity indices"
			end
		elseif type(key) ~= "string" then
			return false, path, "dictionaries cannot have keys of type " .. typeof(key)
		elseif tblType == "Array" then
			return false, path, "cannot store mixed tables"
		elseif not utf8.len(key) then
			return false, path, "dictionary has key that is invalid UTF-8"
		end
		if tblType == "Array" then
			if last ~= key - 1 then
				return false, path, "array has non-sequential indices"
			end
			last = key
		end
		if type(value) == "userdata" or type(value) == "function" or type(value) == "thread" then
			return false, path, "cannot store value '" .. tostring(value) .. "' of type " .. typeof(value)
		elseif type(value) == "string" and not utf8.len(value) then
			return false, path, "cannot store strings that are invalid UTF-8"
		end
		if type(value) == "table" then
			if passed[value] then
				return false, path, "cannot store cyclic tables"
			end
			local isValid, keyPath, reason = scanValidity(value, passed, path)
			if not isValid then
				return isValid, keyPath, reason
			end
		end
		path[#path] = nil
	end
	passed[tbl] = nil
	return true
end

local function getStringPath(path)
	return table.concat(path, '.')
end

-- Import into a single datastore:
local function importPairsFromTable(origin, destination, interface, warnFunc, methodName, prefix, isOrdered)
	for key, value in pairs(origin) do
		if type(key) ~= "string" then
			warnFunc(("%s: ignored %s > '%s' (key is not a string, but a %s)")
				:format(methodName, prefix, tostring(key), typeof(key)))
		elseif not utf8.len(key) then
			warnFunc(("%s: ignored %s > '%s' (key is not valid UTF-8)")
				:format(methodName, prefix, tostring(key)))
		elseif #key > Constants.MAX_LENGTH_KEY then
			warnFunc(("%s: ignored %s > '%s' (key exceeds %d character limit)")
				:format(methodName, prefix, key, Constants.MAX_LENGTH_KEY))
		elseif type(value) == "string" and #value > Constants.MAX_LENGTH_DATA then
			warnFunc(("%s: ignored %s > '%s' (length of value exceeds %d character limit)")
				:format(methodName, prefix, key, Constants.MAX_LENGTH_DATA))
		elseif type(value) == "table" and #HttpService:JSONEncode(value) > Constants.MAX_LENGTH_DATA then
			warnFunc(("%s: ignored %s > '%s' (length of encoded value exceeds %d character limit)")
				:format(methodName, prefix, key, Constants.MAX_LENGTH_DATA))
		elseif type(value) == "function" or type(value) == "userdata" or type(value) == "thread" then
			warnFunc(("%s: ignored %s > '%s' (cannot store value '%s' of type %s)")
				:format(methodName, prefix, key, tostring(value), type(value)))
		elseif isOrdered and type(value) ~= "number" then
			warnFunc(("%s: ignored %s > '%s' (cannot store value '%s' of type %s in OrderedDataStore)")
				:format(methodName, prefix, key, tostring(value), type(value)))
		elseif isOrdered and value % 1 ~= 0 then
			warnFunc(("%s: ignored %s > '%s' (cannot store non-integer value '%s' in OrderedDataStore)")
				:format(methodName, prefix, key, tostring(value)))
		elseif type(value) == "string" and not utf8.len(value) then
			warnFunc(("%s: ignored %s > '%s' (string value is not valid UTF-8)")
				:format(methodName, prefix, key, tostring(value), type(value)))
		else
			local isValid = true
			local keyPath, reason
			if type(value) == "table" then
				isValid, keyPath, reason = scanValidity(value)
			end
			if isOrdered then
				value = math.floor(value + .5)
			end
			if isValid then
				local old = destination[key]
				destination[key] = value
				if interface and old ~= value then -- hacky block to fire OnUpdate signals
					if isOrdered and interface then -- hacky block to populate internal structures for OrderedDataStores
						if interface.__ref[key] then
							interface.__ref[key].Value = value
							interface.__changed = true
						else
							interface.__ref[key] = {Key = key, Value = interface.__data[key]}
							table.insert(interface.__sorted, interface.__ref[key])
							interface.__changed = true
						end
					end
					interface.__event:Fire(key, value)
				end
			else
				warnFunc(("%s: ignored %s > '%s' (table has invalid entry at <%s>: %s)")
					:format(methodName, prefix, key, getStringPath(keyPath), reason))
			end
		end
	end
end

-- Trim empty datastores and scopes from an entire datastore type:
local function prepareDataStoresForExport(origin)
	local dataPrepared = {}

	for name, scopes in pairs(origin) do
		local exportScopes = {}
		for scope, data in pairs(scopes) do
			local exportData = {}
			for key, value in pairs(data) do
				exportData[key] = value
			end
			if next(exportData) ~= nil then -- Only export datastore when non-empty
				exportScopes[scope] = exportData
			end
		end
		if next(exportScopes) ~= nil then -- Only export scope list when non-empty
			dataPrepared[name] = exportScopes
		end
	end

	if next(dataPrepared) ~= nil then -- Only return datastore type when non-empty
		return dataPrepared
	end
end

local function preprocessKey(key)
	if type(key) == "number" then
		if key ~= key then
			return "NAN"
		elseif key >= math.huge then
			return "INF"
		elseif key <= -math.huge then
			return "-INF"
		end
		return tostring(key)
	end
	return key
end

local function simulateYield()
	if Constants.YIELD_TIME_MAX > 0 then
		wait(rand:NextNumber(Constants.YIELD_TIME_MIN, Constants.YIELD_TIME_MAX))
	end
end

local function simulateErrorCheck(method)
	if Constants.SIMULATE_ERROR_RATE > 0 and rand:NextNumber() <= Constants.SIMULATE_ERROR_RATE then
		simulateYield()
		error(method .. " rejected with error (simulated error)", 3)
	end
end

-- Setting these here so the functions above can self-reference just by name:
MockDataStoreUtils.logMethod = logMethod
MockDataStoreUtils.deepcopy = deepcopy
MockDataStoreUtils.scanValidity = scanValidity
MockDataStoreUtils.getStringPath = getStringPath
MockDataStoreUtils.importPairsFromTable = importPairsFromTable
MockDataStoreUtils.prepareDataStoresForExport = prepareDataStoresForExport
MockDataStoreUtils.preprocessKey = preprocessKey
MockDataStoreUtils.simulateYield = simulateYield
MockDataStoreUtils.simulateErrorCheck = simulateErrorCheck

return MockDataStoreUtils
]]></ProtectedString>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXCBACD6B002004639B27F30EE98861E99">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MockGlobalDataStore</string>
						<string name="ScriptGuid">{FC1A6069-02C6-4FEB-821A-77F30663E9FA}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	MockGlobalDataStore.lua
	This module implements the API and functionality of Roblox's GlobalDataStore class.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

local MockGlobalDataStore = {}
MockGlobalDataStore.__index = MockGlobalDataStore

local MockDataStoreManager = require(script.Parent.MockDataStoreManager)
local Utils = require(script.Parent.MockDataStoreUtils)
local Constants = require(script.Parent.MockDataStoreConstants)
local HttpService = game:GetService("HttpService") -- for json encode/decode

local rand = Random.new()

function MockGlobalDataStore:OnUpdate(key, callback)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'OnUpdate' (string expected, got %s)"):format(typeof(key)), 2)
	elseif type(callback) ~= "function" then
		error(("bad argument #2 to 'OnUpdate' (function expected, got %s)"):format(typeof(callback)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'OnUpdate' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'OnUpdate' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("OnUpdate")

	local success = MockDataStoreManager.YieldForBudget(
		function()
			warn(("OnUpdate request was throttled due to lack of budget. Try sending fewer requests. Key = %s"):format(key))
		end,
		{Enum.DataStoreRequestType.OnUpdate}
	)

	if not success then
		error("OnUpdate rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	Utils.logMethod(self, "OnUpdate", key)

	return self.__event.Event:Connect(function(k, v)
		if k == key then
			if Constants.YIELD_TIME_UPDATE_MAX > 0 then
				wait(rand:NextNumber(Constants.YIELD_TIME_UPDATE_MIN, Constants.YIELD_TIME_UPDATE_MAX))
			end
			callback(v) -- v was implicitly deep-copied
		end
	end)
end

function MockGlobalDataStore:GetAsync(key)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'GetAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'GetAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'GetAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	if self.__getCache[key] and tick() - self.__getCache[key] < Constants.GET_COOLDOWN then
		self.__getCache[key] = tick()
		return Utils.deepcopy(self.__data[key])
	end

	Utils.simulateErrorCheck("GetAsync")

	local success = MockDataStoreManager.YieldForBudget(
		function()
			warn(("GetAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s"):format(key))
		end,
		{Enum.DataStoreRequestType.GetAsync}
	)

	if not success then
		error("GetAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	self.__getCache[key] = tick()

	local retValue = Utils.deepcopy(self.__data[key])

	Utils.simulateYield()

	Utils.logMethod(self, "GetAsync", key)

	return retValue
end

function MockGlobalDataStore:IncrementAsync(key, delta)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'IncrementAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif delta ~= nil and type(delta) ~= "number" then
		error(("bad argument #2 to 'IncrementAsync' (number expected, got %s)"):format(typeof(delta)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'IncrementAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'IncrementAsync' (key name exceeds %d character limit)")
			:format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("IncrementAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("IncrementAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementAsync}
		)
	else
		self.__writeLock[key] = true
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("IncrementAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			{Enum.DataStoreRequestType.SetIncrementAsync}
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("IncrementAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	local old = self.__data[key]

	if old ~= nil and (type(old) ~= "number" or old % 1 ~= 0) then
		Utils.simulateYield()
		error("IncrementAsync rejected with error (cannot increment non-integer value)", 2)
	end

	self.__writeLock[key] = true

	delta = delta and math.floor(delta + .5) or 1

	self.__data[key] = (old or 0) + delta

	if old == nil or delta ~= 0 then
		self.__event:Fire(key, self.__data[key])
	end

	local retValue = self.__data[key]

	Utils.simulateYield()

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	self.__getCache[key] = tick()

	Utils.logMethod(self, "IncrementAsync", key, retValue, delta)

	return retValue
end

function MockGlobalDataStore:RemoveAsync(key)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'RemoveAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'RemoveAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'RemoveAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("RemoveAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("RemoveAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementAsync}
		)
	else
		self.__writeLock[key] = true
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("RemoveAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			{Enum.DataStoreRequestType.SetIncrementAsync}
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("RemoveAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	self.__writeLock[key] = true

	local value = Utils.deepcopy(self.__data[key])
	self.__data[key] = nil

	if value ~= nil then
		self.__event:Fire(key, nil)
	end

	Utils.simulateYield()

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	Utils.logMethod(self, "RemoveAsync", key, value)

	return value
end

function MockGlobalDataStore:SetAsync(key, value)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'SetAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'SetAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'SetAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	elseif value == nil or type(value) == "function" or type(value) == "userdata" or type(value) == "thread" then
		error(("bad argument #2 to 'SetAsync' (cannot store value '%s' of type %s)")
			:format(tostring(value), typeof(value)), 2)
	end

	if type(value) == "table" then
		local isValid, keyPath, reason = Utils.scanValidity(value)
		if not isValid then
			error(("bad argument #2 to 'SetAsync' (table has invalid entry at <%s>: %s)")
				:format(Utils.getStringPath(keyPath), reason), 2)
		end
		local pass, content = pcall(function() return HttpService:JSONEncode(value) end)
		if not pass then
			error("bad argument #2 to 'SetAsync' (table could not be encoded to json)", 2)
		elseif #content > Constants.MAX_LENGTH_DATA then
			error(("bad argument #2 to 'SetAsync' (encoded data length exceeds %d character limit)")
				:format(Constants.MAX_LENGTH_DATA), 2)
		end
	elseif type(value) == "string" then
		if #value > Constants.MAX_LENGTH_DATA then
			error(("bad argument #2 to 'SetAsync' (data length exceeds %d character limit)")
				:format(Constants.MAX_LENGTH_DATA), 2)
		elseif not utf8.len(value) then
			error("bad argument #2 to 'SetAsync' (string value is not valid UTF-8)", 2)
		end
	end

	Utils.simulateErrorCheck("SetAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("SetAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementAsync}
		)
	else
		self.__writeLock[key] = true
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("SetAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			{Enum.DataStoreRequestType.SetIncrementAsync}
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("SetAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	self.__writeLock[key] = true

	if type(value) == "table" or value ~= self.__data[key] then
		self.__data[key] = Utils.deepcopy(value)
		self.__event:Fire(key, self.__data[key])
	end

	Utils.simulateYield()

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	Utils.logMethod(self, "SetAsync", key, self.__data[key])

end

function MockGlobalDataStore:UpdateAsync(key, transformFunction)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'UpdateAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif type(transformFunction) ~= "function" then
		error(("bad argument #2 to 'UpdateAsync' (function expected, got %s)"):format(typeof(transformFunction)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'UpdateAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'UpdateAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("UpdateAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("UpdateAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementAsync}
		)
	else
		self.__writeLock[key] = true
		local budget
		if self.__getCache[key] and tick() - self.__getCache[key] < Constants.GET_COOLDOWN then
			budget = {Enum.DataStoreRequestType.SetIncrementAsync}
		else
			budget = {Enum.DataStoreRequestType.GetAsync, Enum.DataStoreRequestType.SetIncrementAsync}
		end
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("UpdateAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			budget
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("UpdateAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	local value = transformFunction(Utils.deepcopy(self.__data[key]))

	if value == nil then -- cancel update after remote call
		Utils.simulateYield()
		return nil -- this is what datastores do even though it should be old value
	end

	if type(value) == "function" or type(value) == "userdata" or type(value) == "thread" then
		error(("UpdateAsync rejected with error (resulting value '%s' is of type %s that cannot be stored)")
			:format(tostring(value), typeof(value)), 2)
	end

	if type(value) == "table" then
		local isValid, keyPath, reason = Utils.scanValidity(value)
		if not isValid then
			error(("UpdateAsync rejected with error (resulting table has invalid entry at <%s>: %s)")
				:format(Utils.getStringPath(keyPath), reason), 2)
		end
		local pass, content = pcall(function() return HttpService:JSONEncode(value) end)
		if not pass then
			error("UpdateAsync rejected with error (resulting table could not be encoded to json)", 2)
		elseif #content > Constants.MAX_LENGTH_DATA then
			error(("UpdateAsync rejected with error (resulting encoded data length exceeds %d character limit)")
				:format(Constants.MAX_LENGTH_DATA), 2)
		end
	elseif type(value) == "string" then
		if #value > Constants.MAX_LENGTH_DATA then
			error(("UpdateAsync rejected with error (resulting data length exceeds %d character limit)")
				:format(Constants.MAX_LENGTH_DATA), 2)
		elseif not utf8.len(value) then
			error("UpdateAsync rejected with error (string value is not valid UTF-8)", 2)
		end
	end

	self.__writeLock[key] = true

	if type(value) == "table" or value ~= self.__data[key] then
		self.__data[key] = Utils.deepcopy(value)
		self.__event:Fire(key, self.__data[key])
	end

	local retValue = Utils.deepcopy(value)

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	self.__getCache[key] = tick()

	Utils.logMethod(self, "UpdateAsync", key, retValue)

	return retValue
end

function MockGlobalDataStore:ExportToJSON()
	return HttpService:JSONEncode(self.__data)
end

function MockGlobalDataStore:ImportFromJSON(json, verbose)
	local content
	if type(json) == "string" then
		local parsed, value = pcall(function() return HttpService:JSONDecode(json) end)
		if not parsed then
			error("bad argument #1 to 'ImportFromJSON' (string is not valid json)", 2)
		end
		content = value
	elseif type(json) == "table" then
		content = Utils.deepcopy(json)
	else
		error(("bad argument #1 to 'ImportFromJSON' (string or table expected, got %s)"):format(typeof(json)), 2)
	end

	if verbose ~= nil and type(verbose) ~= "boolean" then
		error(("bad argument #2 to 'ImportFromJSON' (boolean expected, got %s)"):format(typeof(verbose)), 2)
	end

	Utils.importPairsFromTable(
		content,
		self.__data,
		MockDataStoreManager.GetDataInterface(self.__data),
		(verbose == false and function() end or warn),
		"ImportFromJSON",
		((type(self.__name) == "string" and type(self.__scope) == "string")
			and ("DataStore > %s > %s"):format(self.__name, self.__scope)
			or "GlobalDataStore"),
		false
	)
end

return MockGlobalDataStore
]]></ProtectedString>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX994BFAC09E58453F92A34B42722C52AF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MockOrderedDataStore</string>
						<string name="ScriptGuid">{149EDF4B-1F0A-4424-93A8-6383B86C875B}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	MockOrderedDataStore.lua
	This module implements the API and functionality of Roblox's OrderedDataStore class.

	This module is licensed under APLv2, refer to the LICENSE file or:
	https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE
]]

local MockOrderedDataStore = {}
MockOrderedDataStore.__index = MockOrderedDataStore

local MockDataStoreManager = require(script.Parent.MockDataStoreManager)
local MockDataStorePages = require(script.Parent.MockDataStorePages)
local Utils = require(script.Parent.MockDataStoreUtils)
local Constants = require(script.Parent.MockDataStoreConstants)
local HttpService = game:GetService("HttpService") -- for json encode/decode

local rand = Random.new()

function MockOrderedDataStore:OnUpdate(key, callback)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'OnUpdate' (string expected, got %s)"):format(typeof(key)), 2)
	elseif type(callback) ~= "function" then
		error(("bad argument #2 to 'OnUpdate' (function expected, got %s)"):format(typeof(callback)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'OnUpdate' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'OnUpdate' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("OnUpdate")

	local success = MockDataStoreManager.YieldForBudget(
		function()
			warn(("OnUpdate request was throttled due to lack of budget. Try sending fewer requests. Key = %s"):format(key))
		end,
		{Enum.DataStoreRequestType.OnUpdate}
	)

	if not success then
		error("OnUpdate rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	Utils.logMethod(self, "OnUpdate", key)

	return self.__event.Event:Connect(function(k, v)
		if k == key then
			if Constants.YIELD_TIME_UPDATE_MAX > 0 then
				wait(rand:NextNumber(Constants.YIELD_TIME_UPDATE_MIN, Constants.YIELD_TIME_UPDATE_MAX))
			end
			callback(v) -- v was implicitly deep-copied
		end
	end)
end

function MockOrderedDataStore:GetAsync(key)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'GetAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'GetAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'GetAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	if self.__getCache[key] and tick() - self.__getCache[key] < Constants.GET_COOLDOWN then
		self.__getCache[key] = tick()
		return self.__data[key]
	end

	Utils.simulateErrorCheck("GetAsync")

	local success = MockDataStoreManager.YieldForBudget(
		function()
			warn(("GetAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s"):format(key))
		end,
		{Enum.DataStoreRequestType.GetAsync}
	)

	if not success then
		error("GetAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	local retValue = self.__data[key]

	Utils.simulateYield()

	self.__getCache[key] = tick()

	Utils.logMethod(self, "GetAsync", key)

	return retValue
end

function MockOrderedDataStore:IncrementAsync(key, delta)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'IncrementAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif delta ~= nil and type(delta) ~= "number" then
		error(("bad argument #2 to 'IncrementAsync' (number expected, got %s)"):format(typeof(delta)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'IncrementAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'IncrementAsync' (key name exceeds %d character limit)")
			:format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("IncrementAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("IncrementAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementSortedAsync}
		)
	else
		self.__writeLock[key] = true
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("IncrementAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			{Enum.DataStoreRequestType.SetIncrementSortedAsync}
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("IncrementAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	local old = self.__data[key]

	if old ~= nil and (type(old) ~= "number" or old % 1 ~= 0) then
		Utils.simulateYield()
		error("IncrementAsync rejected with error (cannot increment non-integer value)", 2)
	end

	self.__writeLock[key] = true

	delta = delta and math.floor(delta + .5) or 1

	if old == nil then
		self.__data[key] = delta
		self.__ref[key] = {Key = key, Value = self.__data[key]}
		table.insert(self.__sorted, self.__ref[key])
		self.__changed = true
		self.__event:Fire(key, self.__data[key])
	elseif delta ~= 0 then
		self.__data[key] = self.__data[key] + delta
		self.__ref[key].Value = self.__data[key]
		self.__changed = true
		self.__event:Fire(key, self.__data[key])
	end

	local retValue = self.__data[key]

	Utils.simulateYield()

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	self.__getCache[key] = tick()

	Utils.logMethod(self, "IncrementAsync", key, retValue, delta)

	return retValue
end

function MockOrderedDataStore:RemoveAsync(key)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'RemoveAsync' (string expected, got %s)"):format(type(key)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'RemoveAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'RemoveAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("RemoveAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("RemoveAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementSortedAsync}
		)
	else
		self.__writeLock[key] = true
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("RemoveAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			{Enum.DataStoreRequestType.SetIncrementSortedAsync}
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("RemoveAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	self.__writeLock[key] = true

	local value = self.__data[key]

	if value ~= nil then
		self.__data[key] = nil
		self.__ref[key] = nil
		for i,v in pairs(self.__sorted) do
			if v.Key == key then
				table.remove(self.__sorted, i)
				break
			end
		end
		self.__event:Fire(key, nil)
	end

	Utils.simulateYield()

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	Utils.logMethod(self, "RemoveAsync", key, value)

	return value
end

function MockOrderedDataStore:SetAsync(key, value)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'SetAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'SetAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'SetAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	elseif type(value) ~= "number" then
		error(("bad argument #2 to 'SetAsync' (number expected, got %s)"):format(typeof(value)), 2)
	elseif value % 1 ~= 0 then
		error("bad argument #2 to 'SetAsync' (cannot store non-integer values in OrderedDataStore)", 2)
	end

	Utils.simulateErrorCheck("SetAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("SetAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementSortedAsync}
		)
	else
		self.__writeLock[key] = true
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("SetAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			{Enum.DataStoreRequestType.SetIncrementSortedAsync}
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("SetAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	self.__writeLock[key] = true

	local old = self.__data[key]

	if old == nil then
		self.__data[key] = value
		self.__ref[key] = {Key = key, Value = value}
		table.insert(self.__sorted, self.__ref[key])
		self.__changed = true
		self.__event:Fire(key, self.__data[key])
	elseif old ~= value then
		self.__data[key] = value
		self.__ref[key].Value = value
		self.__changed = true
		self.__event:Fire(key, self.__data[key])
	end

	Utils.simulateYield()

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	Utils.logMethod(self, "SetAsync", key, self.__data[key])

	return value
end

function MockOrderedDataStore:UpdateAsync(key, transformFunction)
	key = Utils.preprocessKey(key)
	if type(key) ~= "string" then
		error(("bad argument #1 to 'UpdateAsync' (string expected, got %s)"):format(typeof(key)), 2)
	elseif type(transformFunction) ~= "function" then
		error(("bad argument #2 to 'UpdateAsync' (function expected, got %s)"):format(typeof(transformFunction)), 2)
	elseif #key == 0 then
		error("bad argument #1 to 'UpdateAsync' (key name can't be empty)", 2)
	elseif #key > Constants.MAX_LENGTH_KEY then
		error(("bad argument #1 to 'UpdateAsync' (key name exceeds %d character limit)"):format(Constants.MAX_LENGTH_KEY), 2)
	end

	Utils.simulateErrorCheck("UpdateAsync")

	local success

	if self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then
		success = MockDataStoreManager.YieldForWriteLockAndBudget(
			function()
				warn(("UpdateAsync request was throttled, a key can only be written to once every %d seconds. Key = %s")
					:format(Constants.WRITE_COOLDOWN, key))
			end,
			key,
			self.__writeLock,
			self.__writeCache,
			{Enum.DataStoreRequestType.SetIncrementSortedAsync}
		)
	else
		self.__writeLock[key] = true
		local budget
		if self.__getCache[key] and tick() - self.__getCache[key] < Constants.GET_COOLDOWN then
			budget = {Enum.DataStoreRequestType.SetIncrementSortedAsync}
		else
			budget = {Enum.DataStoreRequestType.GetAsync, Enum.DataStoreRequestType.SetIncrementSortedAsync}
		end
		success = MockDataStoreManager.YieldForBudget(
			function()
				warn(("UpdateAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s")
					:format(key))
			end,
			budget
		)
		self.__writeLock[key] = nil
	end

	if not success then
		error("UpdateAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	local value = transformFunction(self.__data[key])

	if value == nil then -- cancel update after remote call
		Utils.simulateYield()
		return nil -- this is what datastores do even though it should be old value
	end

	if type(value) ~= "number" or value % 1 ~= 0 then
		error("UpdateAsync rejected with error (resulting non-integer value can't be stored in OrderedDataStore)", 2)
	end

	self.__writeLock[key] = true

	local old = self.__data[key]

	if old == nil then
		self.__data[key] = value
		self.__ref[key] = {Key = key, Value = value}
		table.insert(self.__sorted, self.__ref[key])
		self.__changed = true
		self.__event:Fire(key, self.__data[key])
	elseif old ~= value then
		self.__data[key] = value
		self.__ref[key].Value = value
		self.__changed = true
		self.__event:Fire(key, self.__data[key])
	end

	Utils.simulateYield()

	self.__writeLock[key] = nil
	self.__writeCache[key] = tick()

	self.__getCache[key] = tick()

	Utils.logMethod(self, "UpdateAsync", key, value)

	return value
end

function MockOrderedDataStore:GetSortedAsync(ascending, pageSize, minValue, maxValue)
	if type(ascending) ~= "boolean" then
		error(("bad argument #1 to 'GetSortedAsync' (boolean expected, got %s)"):format(typeof(ascending)), 2)
	elseif type(pageSize) ~= "number" then
		error(("bad argument #2 to 'GetSortedAsync' (number expected, got %s)"):format(typeof(pageSize)), 2)
	end

	pageSize = math.floor(pageSize + .5)
	if pageSize <= 0 or pageSize > Constants.MAX_PAGE_SIZE then
		error(("bad argument #2 to 'GetSortedAsync' (page size must be an integer above 0 and below or equal to %d)")
			:format(Constants.MAX_PAGE_SIZE), 2)
	end

	if minValue ~= nil then
		if type(minValue) ~= "number" then
			error(("bad argument #3 to 'GetSortedAsync' (number expected, got %s)"):format(typeof(minValue)), 2)
		elseif minValue % 1 ~= 0 then
			error("bad argument #3 to 'GetSortedAsync' (minimum threshold must be an integer)", 2)
		end
	else
		minValue = -math.huge
	end

	if maxValue ~= nil then
		if type(maxValue) ~= "number" then
			error(("bad argument #4 to 'GetSortedAsync' (number expected, got %s)"):format(typeof(maxValue)), 2)
		elseif maxValue % 1 ~= 0 then
			error("bad argument #4 to 'GetSortedAsync' (maximum threshold must be an integer)", 2)
		end
	else
		maxValue = math.huge
	end

	Utils.simulateErrorCheck("GetSortedAsync")

	local success = MockDataStoreManager.YieldForBudget(
		function()
			warn("GetSortedAsync request was throttled due to lack of budget. Try sending fewer requests.")
		end,
		{Enum.DataStoreRequestType.GetSortedAsync}
	)

	if not success then
		error("GetSortedAsync rejected with error (request was throttled, but throttled queue was full)", 2)
	end

	if minValue > maxValue then
		Utils.simulateYield()
		error("GetSortedAsync rejected with error (minimum threshold is higher than maximum threshold)", 2)
	end

	if self.__changed then
		table.sort(self.__sorted, function(a,b) return a.Value < b.Value end)
		self.__changed = false
	end

	local results = {}

	if ascending then
		local i = 1
		while self.__sorted[i] and self.__sorted[i].Value < minValue do
			i = i + 1
		end
		while self.__sorted[i] and self.__sorted[i].Value <= maxValue do
			table.insert(results, {key = self.__sorted[i].Key, value = self.__sorted[i].Value})
			i = i + 1
		end
	else
		local i = #self.__sorted
		while i > 0 and self.__sorted[i].Value > maxValue do
			i = i - 1
		end
		while i > 0 and self.__sorted[i].Value >= minValue do
			table.insert(results, {key = self.__sorted[i].Key, value = self.__sorted[i].Value})
			i = i - 1
		end
	end

	Utils.simulateYield()

	Utils.logMethod(self, "GetSortedAsync")

	return setmetatable({
		__datastore = self;
		__currentPage = 1;
		__pageSize = pageSize;
		__results = results;
		IsFinished = (#results <= pageSize);
	}, MockDataStorePages)
end

function MockOrderedDataStore:ExportToJSON()
	return HttpService:JSONEncode(self.__data)
end

function MockOrderedDataStore:ImportFromJSON(json, verbose)
	local content
	if type(json) == "string" then
		local parsed, value = pcall(function() return HttpService:JSONDecode(json) end)
		if not parsed then
			error("bad argument #1 to 'ImportFromJSON' (string is not valid json)", 2)
		end
		content = value
	elseif type(json) == "table" then
		content = json -- No need to deepcopy, OrderedDataStore only contains numbers which are passed by value
	else
		error(("bad argument #1 to 'ImportFromJSON' (string or table expected, got %s)"):format(typeof(json)), 2)
	end

	if verbose ~= nil and type(verbose) ~= "boolean" then
		error(("bad argument #2 to 'ImportFromJSON' (boolean expected, got %s)"):format(typeof(verbose)), 2)
	end

	Utils.importPairsFromTable(
		content,
		self.__data,
		MockDataStoreManager.GetDataInterface(self.__data),
		(verbose == false and function() end or warn),
		"ImportFromJSON",
		("OrderedDataStore > %s > %s"):format(self.__name, self.__scope),
		true
	)
end

return MockOrderedDataStore
]]></ProtectedString>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBXB38046F426CF4D5289A8DF114306CCE6">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ServerScript</string>
				<string name="ScriptGuid">{08370DC7-AE8C-4EE6-BB78-13BBB0DA4439}</string>
				<ProtectedString name="Source"><![CDATA[local ReplicatedStorage = game:GetService("ReplicatedStorage")
local DataStoreService = require(script.Parent.DataStoreService)


local loadFunction = ReplicatedStorage.Load
local saveFunction = ReplicatedStorage.Save

loadFunction.OnServerInvoke = function(player)
	local worldStore = DataStoreService:GetDataStore("binary", tostring(player.UserId))
	
	local saveString
	local success, err = pcall(function()
		saveString = worldStore:GetAsync("chunk1")
	end)

	success = success and saveString ~= nil
	if not success then
		print("Could not load world!")
	end
	
	return success, saveString
end

saveFunction.OnServerInvoke = function(player, saveString)
	local worldStore = DataStoreService:GetDataStore("binary", tostring(player.UserId))
	local success, err = pcall(function()
		worldStore:SetAsync("chunk1", saveString)
	end)
	
	if not success then
		print("Could not save world!")
	end
	return success
end]]></ProtectedString>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
	<Item class="ServerStorage" referent="RBX922FAE93511B41C691A96C4123465786">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ServerStorage</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="ReplicatedStorage" referent="RBX71A8716913F742898A892CC7AF308D41">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedStorage</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="RemoteFunction" referent="RBXF193AE5F58BA468690C4C986786B36EC">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Save</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="RemoteFunction" referent="RBX13EA9B9305A14B1999CA027FD1B06B81">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Load</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX40C220C55ADF41BE8F0BEAAA06C4892F">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Tiles</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Part" referent="RBX3FB248EB128C48138F45E189B0F030E4">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-6.72001457</X>
						<Y>2</Y>
						<Z>34.6599731</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">1</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX5BC71B3578CF47A994C2332A0745E555">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2168019968</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX433A3C3628CA4762A85F5A5A383BB938">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-12.8900146</X>
						<Y>2</Y>
						<Z>28.9999714</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">2</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXB4A5589105A846A7BA08980C8C38B185">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=152569532</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX139C750AF7B74B9C9695962A9EBF2BE3">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-8.16001511</X>
						<Y>2</Y>
						<Z>22.5299721</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">3</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXEE2DB7304A5044F9874DD436E9681FD0">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=152572257</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX6818CFA63C4447578C40943868729CC8">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>4</X>
						<Y>2.33913994</Y>
						<Z>4</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">10</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX656571D027534BEC89DF2CF031F1505F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=3254393364</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXDA658B190F664A308A0884C44F645530">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>8</X>
						<Y>2.33913994</Y>
						<Z>4</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">11</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX9950AF32712B41BEB307F0D2F42893CD">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=14063310</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX3F5A680172DB4F30B1EDC7BEB00BB457">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>12</X>
						<Y>2.33913994</Y>
						<Z>4</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">12</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX01ABCA876FB645719B9CB1EC00871548">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=95107243</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX825981A8BA1A40769ACE138DF954FF7F">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>16</X>
						<Y>2.33913994</Y>
						<Z>4</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">13</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXCCE6AF61DF4E4DB8867386A65C9C2B9D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=888498549</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXEF82E0A07B284A669217DE7ADE93FC93">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>20</X>
						<Y>2.33913994</Y>
						<Z>4</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">14</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX63F8FD55E9CA49689940797A869807F9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=1164807748</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXABFC2884EDE44C59B4F6AAD75E2A34E8">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>0</X>
						<Y>2.33913994</Y>
						<Z>8</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">15</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX4B53EB6477FF475281115C37815ED3D0">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=368102424</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXE6CAE0A0DF694F0693F28F63A37F2AA2">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>4</X>
						<Y>2.33913994</Y>
						<Z>8</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">16</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX592C47BDF8654026A42966EE96419593">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=4693745392</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX2E87B737C7154FEEB595E0C805766325">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>8</X>
						<Y>2.33913994</Y>
						<Z>8</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">17</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX7910912438254224937294BB0AD8DADC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=60334650</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXB96EDB414D2F4809A0ED8BCD7A2DD12E">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>12</X>
						<Y>2.33913994</Y>
						<Z>8</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">18</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX3397D0275708458C9BD229A91A22D7C1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=11634749</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX026DA70D1A8D444880E36A546373B785">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>16</X>
						<Y>2.33913994</Y>
						<Z>8</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">19</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX16835F1DC9A74A678E8364ECC8EA1839">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2669973298</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXB93300C010DD440696969FD3E3B1A8ED">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>20</X>
						<Y>2.33913994</Y>
						<Z>8</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">20</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXEA3C41542DDE43709BE6C9E4646A880D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=1444995394</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX23507C633CBB483DB79A01256A214E90">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>0</X>
						<Y>2.33913994</Y>
						<Z>12</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">21</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX02175AE5024A40E18F8EA31F43FB202E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=1444995394</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX172A7869664A4F98BD4001C9620C65F7">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>4</X>
						<Y>2.33913994</Y>
						<Z>12</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">22</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXA86195DF0C664ACEB724A8D8FBDFDED6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=1346908747</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX9DFE03B12B494A30BCE724E0ED1E06D5">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>8</X>
						<Y>2.33913994</Y>
						<Z>12</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">23</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXB3347D4A8C84423790390FE4DE80D9B7">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=35548817</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXA3C4197A1B06447892A8F9DC958D1DCF">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>12</X>
						<Y>2.33913994</Y>
						<Z>12</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">24</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX38806197EA564204983563F74A0B4B88">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=1958398457</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXA1A265F8EF4B4666BE69CF766854AFFD">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>16</X>
						<Y>2.33913994</Y>
						<Z>12</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">25</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXAD4CC9D237924F16A168861385558522">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=696511466</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX3C4D68743D4748B7A6F464167ACA697F">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>20</X>
						<Y>2.33913994</Y>
						<Z>12</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">26</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX27101B1482B14AA7B2FB14464B76D28A">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=17920450</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXDDC54CBE3CAD41F687301F253EC0B8D2">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>0</X>
						<Y>2.33913994</Y>
						<Z>16</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">27</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXDBF2F8EC41BA4048873891E64F73CA2B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=92068874</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXE51BFB9E64F44C41A594074DD7D4CBC3">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>4</X>
						<Y>2.33913994</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">4</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXB11CFEE69FEE480A86B9CA65330F8782">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=4552277589</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX4E98D686EBB24518915387099BC2C843">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>8</X>
						<Y>2.33913994</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">5</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX2D2CDABE7DAD406DA3C0469EF4C8E27B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2597103337</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX697583C98AA34D0195CA0531524FEC19">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>12</X>
						<Y>2.33913994</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">6</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX612B8625BBD845A29A2FAA395D0A2747">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=4588038162</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXB01A836CA8E04A589A51527FC4F3BA34">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>16</X>
						<Y>2.33913994</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">7</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXC659C4A7A71F42638ED73415D1BB8290">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=43066568</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX00DB3B55A53A4ABDB0DE028A1E380D74">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>20</X>
						<Y>2.33913994</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">8</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX4A3C8B2FDE13403DB9DFD6D8B8D5F65C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=1796560000</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX41FE1C23C1C74E939D0DBBA7B3FCBCD5">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>0</X>
						<Y>2.33913994</Y>
						<Z>4</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">true</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">9</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX7828FD4FA5E04EA8A120CD237EA84899">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Back</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=1757637666</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX1D4F9B37377D4B6EAFE3C77715FEC6D3">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">TileBackgrounds</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Part" referent="RBXD4DE18103D264F3FA0D1B158C9532B04">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-26</X>
						<Y>2</Y>
						<Z>-2</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">2</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX771381ABC10647C6B1F82BE378214CE8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">3</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=179655033</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXA2BBD410CC6B497C8693B1E41B9358BE">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">0</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=179655033</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXD5F76073FBB0479C9FA347609BF49036">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">5</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=179655033</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX72591008E2B649D483AF8F730750E2A4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">4</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=179655033</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXFB8CED63DD2045A7B1D542330A91052E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=179655033</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXA2883840F6DE47138CCF6A5D7351EA6C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">1</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=179655033</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX340FE4993787437B9CEDB6FC9E1A1A2E">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-6</X>
						<Y>2</Y>
						<Z>-2</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">3</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX40F9173377CD4846AE8F70AB4A589C6A">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">5</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX024F4A1A78574327ADB28A15A46D8902">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX929CADEF364C46198572F15A6D7ECB81">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">3</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX97D55731404A4F439FAC70C0058EE13B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">0</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX6C8802B7B7864816A1DA293CA50C31A8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">1</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXEE446923FE8442ABAD06B50549AF7BEA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">4</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX6E948C5307F9475EB7E7974759336D68">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-6</X>
						<Y>2</Y>
						<Z>-2</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">4</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX6EC9ED599CAA4FF6A1EFF307CCD03583">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">5</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX7A5ADECA22EC4638950ED00745F636D2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXEE59FB8FBB80494C846AFAFAD04B17EB">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">3</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX38A0B305382549C2AEB815213655D673">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">0</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX2A7FABF2A318469E8FF4BDCC0F275C34">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">1</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXD521704FD8684F8592CEEC2C8920A211">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">4</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXAFF8C040DF3941C498FB5D0A4B9DC4FC">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-6</X>
						<Y>2</Y>
						<Z>-2</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">5</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX969A08CFF7BF42B5985B42FA289BC145">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">5</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXA06D56A422A04B4784901CE863CCFD66">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX3C98B5925BE44491BD3B6AA9803AFD8F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">3</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXE1B35B5973974856AA5D5CEA6219FFF0">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">0</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXBEB8092212ED472D923849C654DF09CC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">1</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXBC92070C9A6B472395113E53DC78E7CC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">4</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX4FA53009B5C049859E2C0148B14AEAFC">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-6</X>
						<Y>2</Y>
						<Z>-2</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">6</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBXE07C053E3070406B99BB883D5C6E72FC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">5</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX57D9782F441F4A52B78CC1C52415B3F2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXF7D7B49783DB457AAF4A67051656616B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">3</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX7E0FAAD749BF42D5B921D27D86E3F6B5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">0</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXD781A89E7A6E4C239E391D6CAD7158B5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">1</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX7761C6DD1E2F4D3EA564ABBECA200763">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">4</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=132879294</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBX059B802A7A9B4CFCAD7CF0EF1FBC973F">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-22</X>
						<Y>2.00000501</Y>
						<Z>-2</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">1</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>4</Z>
					</Vector3>
				</Properties>
				<Item class="Texture" referent="RBX9B62DC9C9D684D2389DDB0F282255B79">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">5</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2168019968</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX7269383B9DB54047AC4F5E2147F01BB9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">2</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2168019968</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX660B42FAA8E54713AA9A0C697B1AF3B4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">3</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2168019968</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBXD539C65E5CE24DB3A71AF07EACD500F1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">0</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2168019968</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX3AABE9D5873147D3912E280F38F8AB01">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">1</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2168019968</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
				<Item class="Texture" referent="RBX278C9CD1BE67436CA1EF03F0B8605B61">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<token name="Face">4</token>
						<string name="Name">Texture</string>
						<float name="OffsetStudsU">0</float>
						<float name="OffsetStudsV">0</float>
						<float name="StudsPerTileU">4</float>
						<float name="StudsPerTileV">4</float>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=2168019968</url></Content>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXF81AE609D2464528948064A09A2E1EDE">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Lights</string>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Part" referent="RBX99D415EC599A46D6A0B7E4F18CC075F2">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>-2.5</X>
						<Y>1.50000024</Y>
						<Z>41.5</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">SkyEmitter</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">1</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>4</X>
						<Y>4</Y>
						<Z>24</Z>
					</Vector3>
				</Properties>
				<Item class="SurfaceLight" referent="RBX7E04E684D62640F589A03ACD920C71CA">
					<Properties>
						<float name="Angle">90</float>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<Color3 name="Color">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="Enabled">true</bool>
						<token name="Face">4</token>
						<string name="Name">Light</string>
						<float name="Range">60</float>
						<bool name="Shadows">false</bool>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Part" referent="RBXACB38F4F0FE24246A88AE4C9096A9D61">
				<Properties>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>12.5</X>
						<Y>1.5</Y>
						<Z>41.5</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CastShadow">true</bool>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="Name">TorchEmitter</string>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">1</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
				<Item class="PointLight" referent="RBX9FA15E92D60343C9A93C9F96227D67F8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">0.699999988</float>
						<Color3 name="Color">
							<R>1</R>
							<G>0.819607913</G>
							<B>0.525490224</B>
						</Color3>
						<bool name="Enabled">true</bool>
						<string name="Name">Light</string>
						<float name="Range">18</float>
						<bool name="Shadows">true</bool>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="LuaWebService" referent="RBXE555A5C09EB3478C858445E30A9741AB">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBXC787C07465CB41BE9487B9ACB3234E01">
		<Properties>
			<Color3 name="Ambient">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="Brightness">2</float>
			<Color3 name="ColorShift_Bottom">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<Color3 name="ColorShift_Top">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<float name="EnvironmentDiffuseScale">0</float>
			<float name="EnvironmentSpecularScale">0</float>
			<float name="ExposureCompensation">0</float>
			<Color3 name="FogColor">
				<R>0.752941251</R>
				<G>0.752941251</G>
				<B>0.752941251</B>
			</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">41.7332993</float>
			<bool name="GlobalShadows">true</bool>
			<bool name="LegacyOutlines">false</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">
				<R>0.501960814</R>
				<G>0.501960814</G>
				<B>0.501960814</B>
			</Color3>
			<bool name="Outlines">false</bool>
			<float name="ShadowSoftness">0.5</float>
			<BinaryString name="Tags"></BinaryString>
			<token name="Technology">2</token>
			<string name="TimeOfDay">14:00:00</string>
		</Properties>
	</Item>
	<Item class="HttpService" referent="RBXEFB56FD45DC04ABEA8EE40FE6D995BC0">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="HttpEnabled">false</bool>
			<string name="Name">HttpService</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="Teams" referent="RBX044C3F4C7D24451499461059C5BBFE1D">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teams</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
	<Item class="TestService" referent="RBX01023D93CEFA4EEF9FFF908521122945">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoRuns">true</bool>
			<string name="Description"></string>
			<bool name="ExecuteWithStudioRun">false</bool>
			<bool name="Is30FpsThrottleEnabled">true</bool>
			<bool name="IsPhysicsEnvironmentalThrottled">true</bool>
			<bool name="IsSleepAllowed">true</bool>
			<string name="Name">TestService</string>
			<int name="NumberOfPlayers">0</int>
			<double name="SimulateSecondsLag">0</double>
			<BinaryString name="Tags"></BinaryString>
			<double name="Timeout">10</double>
		</Properties>
	</Item>
	<Item class="VirtualInputManager" referent="RBXC7F96E20D2DA4741BB68495E0B8A1458">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VirtualInputManager</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
</roblox>